<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://yao-lirong.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yao-lirong.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-03T13:23:52+00:00</updated><id>https://yao-lirong.github.io/feed.xml</id><title type="html">Yao Lirong</title><subtitle>Yao Lirong&apos;s personal homepage </subtitle><entry><title type="html">First Time Debugging with ChatGPT</title><link href="https://yao-lirong.github.io/2023/04/03/first-time-debugging-with-chatgpt.html" rel="alternate" type="text/html" title="First Time Debugging with ChatGPT"/><published>2023-04-03T16:00:00+00:00</published><updated>2023-04-03T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2023/04/03/first-time-debugging-with-chatgpt</id><content type="html" xml:base="https://yao-lirong.github.io/2023/04/03/first-time-debugging-with-chatgpt.html"><![CDATA[<p>I was trying out the sampling in <a href="https://github.com/AI-Guru/MMM-JSB">MMM music generation model</a> today and encountered the problem described in <a href="https://github.com/craffel/pretty-midi/issues/220">this issue I proposed</a>. I have no experience writing C in python with <code>ctypes</code>, so I figured why not ask the magic <del> conch shell </del> ChatGPT?</p> <p><span id="more"></span>&lt;p&gt;I’ve asked him several “how to write …” questions since its release, but this was the first time I actually ask him to help me understand a snippet of code so I can proceed to debugging. &lt;/p&gt;&lt;p&gt;It did pretty good in my first question, as it should do as the SOTA LLM model. &lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/q0.png" alt="q0"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/a0.png" alt="a0"/>&lt;/p&gt;&lt;p&gt;What strikes me is the context-aware ability it showed in my second question. It is well known it can do so from all the demos, but seeing it actually work with a real example of your own is really a different story. <strong>Here, I just asked an absolutely arbitrary question and it knew what I was referring to</strong>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/q1.png" alt="q1"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/a1.png" alt="a1"/>&lt;/p&gt;&lt;p&gt;It became mostly clear to me where the bug was, but to make sure&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/q2.png" alt="q2"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/a2.png" alt="a2"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/q3.png" alt="q3"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/a3.png" alt="a3"/>&lt;/p&gt;&lt;p&gt;At last, I conveniently asked it how to fix this bug &lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/q4.png" alt="q4"/>&lt;/p&gt;&lt;p&gt;<img src="/images/2023-04-04-First-Time-Debugging-with-ChatGPT/a4.png" alt="a4"/>&lt;/p&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I was trying out the sampling in MMM music generation model today and encountered the problem described in this issue I proposed. I have no experience writing C in python with ctypes, so I figured why not ask the magic conch shell ChatGPT?]]></summary></entry><entry><title type="html">2022 Web Journal</title><link href="https://yao-lirong.github.io/2022/12/30/2022-web-journal.html" rel="alternate" type="text/html" title="2022 Web Journal"/><published>2022-12-30T16:00:00+00:00</published><updated>2022-12-30T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2022/12/30/2022-web-journal</id><content type="html" xml:base="https://yao-lirong.github.io/2022/12/30/2022-web-journal.html"><![CDATA[<iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/0mMDkedXs6Q9GLwv9aVGfQ?utm_source=generator" width="100%" height="152" frameborder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe> <p><span id="more"></span>&lt;p&gt;<img src="https://static.zaobao.com/s3fs-public/styles/article_large_full/public/2022-10/pingmujietu_2022-10-04_154029.png" alt="“石老人”坍塌"/>&lt;/p&gt;&lt;p&gt;因常年风化、海水侵蚀，加上当天的风雨雷击，山东省青岛市著名地标“石老人”海蚀柱坍塌，官方称已采取临时性保护措施，修复方案正在论证。&lt;/p&gt;&lt;h2 id="Tech-Tools"&gt;<a href="#Tech-Tools" class="headerlink" title="Tech - Tools"></a>Tech - Tools&lt;/h2&gt;&lt;h3 id="VSCode"&gt;<a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Users can now type <code>@lang:languageId</code> in the Settings editor search box to view and edit all settings that can be configured for the language with ID <code>languageId</code>. This way, users can view language-specific settings, also known as language overrides.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Keyboard shortcuts: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;<code>ctrl + pgup</code> and <code>ctrl + pgdn</code> to navigate between opened tabs&lt;/li&gt;&lt;li&gt;<code>ctrl + \</code> go to pairing bracket (self-defined)&lt;/li&gt;&lt;li&gt;Enable switching between terminal and editor <figure class="highlight json">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">{ <span class="attr">"key"</span>: <span class="string">"ctrl+<code class="language-plaintext highlighter-rouge">&amp;quot;&lt;/span&gt;, &lt;span class="attr"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span class="string"&gt;&amp;quot;workbench.action.terminal.focus&amp;quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;#123; &lt;span class="attr"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class="string"&gt;&amp;quot;ctrl+</code>"</span>, <span class="attr">"command"</span>: <span class="string">"workbench.action.focusActiveEditorGroup"</span>, <span class="attr">"when"</span>: <span class="string">"terminalFocus"</span>}</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;To jump by function with <code>ctrl + uparrow</code> and <code>ctrl + downarrow</code>, install extension “Go to Next/Previous Member” and change its setting to &lt;/p&gt;<figure class="highlight json">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"> <span class="string">"gotoNextPreviousMember.symbolKinds"</span>: </span><br/><span class="line">[<span class="string">"interface"</span>, <span class="string">"class"</span>, <span class="string">"function"</span>, <span class="string">"event"</span>, <span class="string">"method"</span>, <span class="string">"module"</span>, <span class="string">"object"</span>, <span class="string">"struct"</span>]</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Others"&gt;<a href="#Others" class="headerlink" title="Others"></a>Others&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A powerful spell that manipulates file names in shell: we want to extract the task ids from html files, which have this format like <code>zz688732.html</code>. Based on the task id, we construct filenames for output files, which have the format <code>zult_688732.out</code>. Finally, we move all these output files to directory <code>results</code>. &lt;/p&gt;<figure class="highlight shell">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ls zz*.html | grep 688 | sed -E 's/zz([0-9]+).html/zult_\1.out/' | xargs -n 1 -I '{}' mv '{}' ./results/</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.quora.com/Is-it-possible-to-find-which-front-end-framework-a-website-uses">Find Out What Framework a Website Uses</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://devtool.tech/tree">Markdown 树形目录可视化生成器</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://detexify.kirelabs.org/classify.html">Draw your Latex Symbol</a>: draw the symbol you are looking for into the square area above and the program will find all corresponding LaTeX commands. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://onemark.neuxlab.cn/">OneMark - Markdown in Onenote</a> &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/jupyter/nbconvert">nbconvert</a>: jupyter notebook built-in converter. It can convert <code>ipynb</code> file to html/markdown/LaTeX format and so on. &lt;/p&gt;<figure class="highlight shell">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">jupyter nbconvert –to markdown lecture2.ipynb</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.reddit.com/r/firefox/comments/s8h3aw/youtube_not_working/">Solve Firefox reports “Secure Connection Failed” when accessing YouTube</a>: Kaspersky doing its job I guess&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Tech-Knowledge"&gt;<a href="#Tech-Knowledge" class="headerlink" title="Tech - Knowledge"></a>Tech - Knowledge&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-Hans.md">中文档案编写排雷指南</a>: 讲解了引号，空格，全角半角符号等使用规范&lt;/li&gt;&lt;li&gt;<a href="https://mrd0x.com/browser-in-the-browser-phishing-attack/">Browser in the Browser Phishing Attack</a>: The author introduces how to simulate a pop-up login window to maliciously acquire user’s password. &lt;/li&gt;&lt;li&gt;When use GitHub, use https to track remote branch. SSH works weird when you have multiple accounts on your local machine. &lt;/li&gt;&lt;li&gt;<a href="https://www.gnu.org/software/sed/manual/html_node/BRE-vs-ERE.html">Basic and extended regular expression</a>: In short, ERE syntax is the regex that we are more familiar with, where where <code>+ ? ()</code> have special meanings. &lt;/li&gt;&lt;li&gt;<a href="https://avestura.dev/blog/hide-a-photo-inside-another-photo">Hiding a photo inside another photo</a>: by changing the least significant bit of every pixel point of the original photo to the photo we want to hide. When we reconstruct, simply extract all these least significant bits and put them back into a picture. This naive approach only works with square photos for now as it can’t store metadata. It also becomes incomprehensible if go through compression like jpeg. &lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Tech-Advances"&gt;<a href="#Tech-Advances" class="headerlink" title="Tech - Advances"></a>Tech - Advances&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://techcommunity.microsoft.com/t5/ai-cognitive-services-blog/azure-text-to-speech-updates-at-build-2021/ba-p/2382981">Microsoft Azure Text-to-Speech Engine</a>: really amazing stuff, indistinguishable from real human voice&lt;/li&gt;&lt;li&gt;<a href="https://braininitiative.nih.gov/">The BRAIN Initiative</a>: almost a whole brain simulation effort? &lt;/li&gt;&lt;li&gt;<a href="https://microsoft.github.io/prompt-engineering/">Get Codex to Produce the Code You Want with Prompt Engineering</a>: Software 3.0 is to design the prompt? &lt;/li&gt;&lt;li&gt;<a href="https://www.npr.org/sections/health-shots/2022/11/14/1136186819/cultivated-cultured-meat-heathy-climate-change">FDA gives safety nod to ‘no kill’ meat, bringing it closer to sale in the U.S.</a>: Scientists “grow” meat: they extract cells from an animal, place them in tanks, feed them the nutrients, let them divide and reproduce, and end up with meat. <a href="https://www.ruanyifeng.com/blog/2023/06/weekly-issue-259.html"><em>Ruanyifeng 259</em></a> &lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Glorious-To-View-康奈尔天下第一"&gt;<a href="#Glorious-To-View-康奈尔天下第一" class="headerlink" title="Glorious To View 康奈尔天下第一"></a>Glorious To View 康奈尔天下第一&lt;/h2&gt;&lt;h3 id="Glorious-to-View"&gt;<a href="#Glorious-to-View" class="headerlink" title="Glorious to View"></a>Glorious to View&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;<a href="https://cornellsun.com/2011/11/29/unknowing-cornellians-call-famous-alumnis-rooms-home/">Where do Famous Cornell Alumni Live?</a> &lt;/li&gt;&lt;li&gt;<a href="https://cornellsun.com/2010/02/09/brain-collection-preserves-figures-in-history/">Brain Collection Preserves Figures in History</a>: Now on Uris 2nd floor. The most fascinating one is the Edward Rulloff’ brain - a notorious murderer but claimed to have the 2nd largest brain ever found in human history&lt;/li&gt;&lt;li&gt;Some very familiar melodies: <a href="https://youtu.be/2pN3qiM8X1I">Alma Mater</a>, <a href="https://youtu.be/iimUxxDQIJI">The Evening Song</a> &lt;/li&gt;&lt;li&gt;<a href="https://izi.travel/en/0309-cornell-teaching-dairy-barn-tour/en">Virtual Tour to Cornell Teaching Dairy Barn</a>, found in <a href="https://cals.cornell.edu/cornell-dairy">this CALS page</a> &lt;/li&gt;&lt;li&gt;Alright, so where does “Cornell Note Taking” come from? Here’s a <a href="https://lsc.cornell.edu/how-to-study/taking-notes/cornell-note-taking-system/">post from Cornell Learning Strategy Center</a> on “Cornell Note Taking” - it was really a thing. &lt;/li&gt;&lt;li&gt;<a href="http://villareal.net/cosmos-2012">Cosmos, Johnson Museum of Art</a>: my favorite view on campus<br/><img src="https://images.squarespace-cdn.com/content/v1/516acc12e4b048b5b3e5a114/1384542902379-CIIP82WZNZOC4CJY5NV7/VILLAREAL_COSMOS_JamesEwing-2171F.jpg"/>&lt;/li&gt;&lt;li&gt;<a href="https://www.weissmanfredi.com/projects/701-cornell-sesquicentennial-grove">Cornell Sesquicentennial Grove</a>: never realized these benches have a name<br/><img src="https://www.weissmanfredi.com/images/BB_serra_valley_night_16.jpg?w=2000"/>&lt;/li&gt;&lt;li&gt;<a href="https://giving.cornell.edu/why-give/donor-recognition/1865-society/digital-swag/">1865 Society Wallpaper</a>, <a href="https://alumni.cornell.edu/connect/downloads/#digital-downloads">Cornell Logo Digital Downloads</a>, &lt;/li&gt;&lt;li&gt;<a href="https://www.chess.cornell.edu/public/tours">Schedule at Tour at Cornell’s Particle Accelerator</a> &lt;/li&gt;&lt;li&gt;<a href="https://vimeo.com/762775939/f38ce737ee">Haunted Stories at Cornell - A Halloween Video</a>: talks about Morrill Hall dissection for Zoology, pumpkin mystery, sleeping founders at Sage Chapel, and other interesting ghost stories. &lt;/li&gt;&lt;/ul&gt;&lt;h3 id="1-Subreddit"&gt;<a href="#1-Subreddit" class="headerlink" title="#1 Subreddit"></a>#1 Subreddit&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.reddit.com/r/Cornell/comments/a21r0v/can_somehow_explain_how_meal_plans_arent_an/">Can somehow explain how meal plans aren’t an absolute scam?</a> Cornell kids doing the math &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.reddit.com/r/Cornell/comments/w7shq4/lightning_strike_on_the_slope_last_night/">:cloud_with_lightning: lightning strike on hill</a>, context <a href="https://www.reddit.com/r/Cornell/comments/w7j4br/kaboom_the_sky/ihklu3o/">here</a>&lt;/p&gt;&lt;p&gt;<img src="https://i.redd.it/33nbdvl0lqd91.jpg" alt="电来！"/>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://dailycrimelog.cupolice.cornell.edu/">Daily Crime Log</a>: try check this when you’re really bored&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.reddit.com/r/Cornell/comments/j0ab9n/anonymous_poet_really_didnt_deserve_this/">Dexter responded to a reddit post</a>: both sides had a point &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="To-Do-the-Greatest-Good"&gt;<a href="#To-Do-the-Greatest-Good" class="headerlink" title="To Do the Greatest Good"></a>To Do the Greatest Good&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;<a href="https://news.cornell.edu/stories/2022/05/3d-printing-robot-enables-sustainable-construction">3D-printing robot enables sustainable construction</a>: Random story reminds me of von Neumann’s plan of using self-reproducing automata to colonize moon &lt;/li&gt;&lt;li&gt;<a href="https://news.cornell.edu/stories/2022/07/smart-thermostats-inadvertently-strain-electric-power-grids">Smart thermostats inadvertently strain electric power grids</a>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Request-a-Purchase"&gt;<a href="#Request-a-Purchase" class="headerlink" title="Request a Purchase"></a>Request a Purchase&lt;/h3&gt;&lt;p&gt;The following are the books I requested Cornell to purchase. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;<a href="https://newcatalog.library.cornell.edu/catalog/15156692">房思琪的初戀樂園</a>&lt;/li&gt;&lt;li&gt;<a href="https://newcatalog.library.cornell.edu/catalog/15317213">占星术杀人魔法</a>&lt;/li&gt;&lt;li&gt;<a href="https://newcatalog.library.cornell.edu/catalog/15298147">首无·作崇之物</a>&lt;/li&gt;&lt;li&gt;<a href="https://newcatalog.library.cornell.edu/catalog/15307572">三岔口</a>&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Talks"&gt;<a href="#Talks" class="headerlink" title="Talks"></a>Talks&lt;/h2&gt;&lt;h3 id="一席-YiXi"&gt;<a href="#一席-YiXi" class="headerlink" title="一席 YiXi"></a>一席 YiXi&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://youtu.be/7rsIPK3rbdE?t=422">李涵：少年的你 7:00</a>：「问题少年」的社会工作&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我认为降低刑事责任年龄表达了一种需要，这种需要是独立的少年司法体系的需要，而并不仅仅是真的降低就能解决的。我们把刑事责任年龄降低到10岁又怎么样呢？不会有9岁的未成年人实施违法犯罪行为吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://youtu.be/5wFTDS6TJOU?t=811">胡立德（David Hu）：浪費科學家</a>：类似原来订阅的小哥白尼杂志里面各种乱七八糟的研究，但实际上这可能才是真正的「生物学家」&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;现在大多数的生物学家都在研究细胞和基因，真正研究动物的人越来越少了&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://youtu.be/GTaD6zaC_8M?t=1726">何袜皮：小區保安，恐懼和被恐懼的</a>：中国的小区为什么需要保安，保安到底在干什么，以及他们是什么样的人&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我们说起恐惧感，都会认为这是一个非常消极的、负面的、被动的情绪，大家都避之不及，但是从理论上讲它其实也可能是一种权利，它甚至有时候是有利于某些群体内部的团结的。&lt;/p&gt;&lt;p&gt;德国社会学家贝克就说，在一个对上帝、阶级、国家和进步的信任和信仰已基本消失的年代，共同恐惧已经被证明是人类仅剩的能通过矛盾来制造新联系的资源了。&lt;/p&gt;&lt;p&gt;大家都知道中产阶级形成的时间很短，他们之间共享的东西很少，恐惧感是少数他们能够共享的东西之一，甚至可以称之为文化资本。<strong>业主不太会说我想要更多保安是因为我想抬高房价，我想体现我的身份地位，业主只会说我想更多保安是因为我觉得不安全。</strong>&lt;/p&gt;&lt;p&gt;他们其实是把自己放在了一个脆弱的恐惧的担忧的角色当中，去合理化这样一种炫耀性消费的需求。但这种需求并不是真正源自于对小概率犯罪的一个恐惧，很大程度上它是源于在今天这样一个高速发展的时代，他对自身的经济状况和社会地位的没有安全感。&lt;/p&gt;&lt;p&gt;我如果跟业主坐下来聊恐惧的话，我们可以聊很长时间，他们会跟我讲，他们会很害怕空气污染、食品安全、社区犯罪、小孩拐卖、转基因等等。如果我去问一个保安，你害怕什么？我通常是得不到答案的。&lt;/p&gt;&lt;p&gt;保安们似乎从来没有准备好要被问这样一个问题，也就是默认了他们是没有资格恐惧的。<strong>但是每个人都有恐惧，恐惧是人性的一部分，如果你否认了一个人的恐惧，就相当于否认了这个人的人性。</strong> &lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="声东击西"&gt;<a href="#声东击西" class="headerlink" title="声东击西"></a>声东击西&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;<a href="https://etw.fm/182">能影响一亿人的 1 秒又怎样？</a> 很有洞见的资深内容创作者谈话。虽然从技术自由角度我不喜欢他的大部分观点，但是有一点非常可取，就是他提出我们现在单纯的「流量」，即观看时长来衡量内容价值太片面；需要用立体的 观看量 $\times$ 观看时长 的计量单位取代&lt;/li&gt;&lt;li&gt;<a href="https://etw.fm/200">群众基础和通往夺冠之路</a> 讲中国女足或者更广泛到足球以及整个大体育的问题。15:38 左右谈到我们现在的体育发展是一个恶性的内循环：训练很多体育生，但是最后能靠它吃饭的只有一小部分人，于是大多数人投入了人生的黄金时间无法进入国家队成为职业运动员，只能最终去做教练或者体育管理的相关职业，转型是很难的，最终再由这些人培养新的体育生。可见如果选择走体育，你的人生道路并不是越走越宽，而是越走越窄的。&lt;/li&gt;&lt;li&gt;<a href="https://etw.fm/193">我们习以为常的和平为何难以降临阿富汗？</a> 后发国家通过援助发展，首先都是外部世界（发达国家）拉动一个城市，但最终结果不尽相同：1.城市成功拉动乡村：如韩国城市人口占总人口一半，常发生在规模小的国家 2. 乡村拉平城市：如国土面积相比来说巨大的越南「西贡时刻」，城市更像是一块悬浮在落后乡村之上的先进飞地，没有力量拉动乡村，最后北越将南越拉了下来&lt;/li&gt;&lt;li&gt;<a href="https://etw.fm/193">伯内斯和操纵大众情绪的手</a> &lt;/li&gt;&lt;/ul&gt;&lt;h2 id="We-are-the-World-明天会更好"&gt;<a href="#We-are-the-World-明天会更好" class="headerlink" title="We are the World 明天会更好"></a>We are the World 明天会更好&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://new.qq.com/omn/20220122/20220122A04BCB00.html">“双层”卧铺动车组春运首秀</a>: 太炫了 咱的铁路文化在资源允许的情况下要是能打日本就太好了&lt;/p&gt;&lt;p&gt;<img src="https://inews.gtimg.com/newsapp_bt/0/14451293779/1000"/>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://zh.moegirl.org.cn/%E3%80%8A%E5%92%AC%E6%96%87%E5%9A%BC%E5%AD%97%E3%80%8B%E5%8E%86%E5%B9%B4%E5%8D%81%E5%A4%A7%E6%B5%81%E8%A1%8C%E8%AF%AD">《咬文嚼字》历年十大流行语</a>: 突然想起来「至于你信不信，我反正信了。」这句名言，查了一下后咬文嚼字原来也是权威且寓教于乐的一本小月刊，从历年十大流行语可以追忆下往昔。原链接已404。<a href="https://web.archive.org/web/20220801142807/https://zh.moegirl.org.cn/%E3%80%8A%E5%92%AC%E6%96%87%E5%9A%BC%E5%AD%97%E3%80%8B%E5%8E%86%E5%B9%B4%E5%8D%81%E5%A4%A7%E6%B5%81%E8%A1%8C%E8%AF%AD#">archive</a>&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Doomsday-Clock-末日时钟"&gt;<a href="#Doomsday-Clock-末日时钟" class="headerlink" title="Doomsday Clock 末日时钟"></a>Doomsday Clock 末日时钟&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="http://www.ruanyifeng.com/blog/2022/08/weekly-issue-218.html">葡萄采摘和樱花盛开日期证明全球变暖</a> &lt;/li&gt;&lt;li&gt;<a href="https://www.reuters.com/world/africa/african-penguins-endangered-by-shipping-noise-algoa-bay-2022-08-16/">African penguins endangered by shipping noise in Algoa Bay</a> <a href="https://www.zaobao.com.sg/realtime/world/story20220816-1303643">中文版:因航运活动噪音 非洲企鹅濒临灭绝</a> &lt;/li&gt;&lt;li&gt;<a href="https://weather.com/news/weather/video/hunger-stone-in-czech-republic-has-grim-warning-about-european-drought">“Hunger Stone” Emerges With Grim Warning</a>, last time a hunger stone emerges was just <a href="https://www.npr.org/2018/08/24/641331544/drought-in-central-europe-reveals-cautionary-hunger-stones-in-czech-river">4 years ago back in 2018</a> &lt;/li&gt;&lt;li&gt;<a href="https://www.bloomberg.com/news/newsletters/2022-08-28/critics-and-fans-have-never-disagreed-more-about-movies">Critics and Fans Have Never Disagreed More About Movies</a>: especially in those featuring Black people and women as the main characters. Woops :hushed: &lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Cyberpunk-2077-太赛博了"&gt;<a href="#Cyberpunk-2077-太赛博了" class="headerlink" title="Cyberpunk 2077 太赛博了"></a>Cyberpunk 2077 太赛博了&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Goodbye V, And Never Stop Fighting&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.zaobao.com.sg/realtime/china/story20210827-1186983">中国网民规模超10亿</a> 实际是2021年的新闻，第一次看到的时候想得不是增长得好快，而是还有4亿人不使用互联网，他们在这个去哪都要健康码的时候怎么生存呢？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.bleepingcomputer.com/news/microsoft/microsoft-is-testing-ads-in-the-windows-11-file-explorer/">Microsoft is testing ads in the Windows 11 File Explorer</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.bleepingcomputer.com/news/security/github-suspends-accounts-of-russian-devs-at-sanctioned-companies/">GitHub suspends accounts of Russian devs at sanctioned companies</a>, <a href="https://github.blog/2022-03-02-our-response-to-the-war-in-ukraine/">original blog post</a> mentioned here&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;In parallel with our efforts to make sure GitHub is available to developers in all countries, we are continuing to ensure free open source services are available to all, including developers in Russia&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://mp.weixin.qq.com/s/heRqYI-GFw5EX_0r_4Jh9g">悄悄拍摄行人，算法指挥员工：便利蜂的“系统”是否越界</a> <a href="https://instant.lvv2.com/html/de95988af2efdb047b2113e72ae51c84.html">Backup Archive</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这是一场颇具科幻意味的试验，一家名为便利蜂的连锁经营便利店正在研发一套算法，从选址、订货、物流、陈列，甚至打扫卫生，都交给“系统”决策。&lt;/p&gt;&lt;p&gt;“系统”是便利蜂的大脑，通过一台电脑向店员们发号施令，每个任务都附有极为细致的标准操作规范。店里有摄像头全方位无死角覆盖，它们是系统的眼睛，实时监督着店员们。通过人工和AI自动识别店内的画面，一旦不符合要求，便会自动报警。&lt;/p&gt;&lt;p&gt;顾客们的一举一动也会被收集起来，成为系统的决策依据。让人不安的是，这样的摄像头从店内延伸到了店外。为了建立一套智能化的选址算法，便利蜂正在悄悄进行一场大规模的公共图像采集。&lt;/p&gt;&lt;p&gt;自2017年起，在长达五年的时间里，便利蜂招募大量信息采集员将摄像头悄悄地放在了多个城市的居民楼、写字楼，甚至国家机关的门口，完整捕捉下当天出入的每一个人。每一个便利蜂的目标店铺附近，都会遭到一轮录像。便利蜂后台至少累积了数十万条拍摄数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.ruanyifeng.com/blog/2022/03/weekly-issue-199.html">科技爱好者周刊（第 199 期）：俄罗斯的 HTTPS 证书问题</a>&lt;/p&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;夫风者，天地之气，溥畅而至，不择贵贱高下而加焉。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;它的意思是，天地间的风，无差别地吹拂，不会因为贵贱高下，而有所不同。&lt;/p&gt;&lt;p&gt;我一直认为，互联网是中立的技术基础设置，应该像风一样，无差别地吹拂到每个人，不应该区分穷人、富人、坏人、好人，人人都有权使用互联网。&lt;/p&gt;&lt;p&gt;<strong>一旦因为政治原因吊销 HTTPS 证书，或者让俄罗斯断网，互联网的中立性就荡然无存</strong>，不再是人人都可以使用的技术基础设施了。这等于把”互联网武器化”，只要你是我眼中的恶棍，我就不同意你使用互联网。&lt;/p&gt;&lt;p&gt;开了这种危险的先例，把互联网当作武器，互联网从此就变成了国防设施。国与国之间都搞自己的证书、自己的域名、自己的国际网关，严格区分网络国境线。互联网创立时的开放、自由、统一、造福人类的梦想，灰飞烟灭。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://vivaldi.com/blog/why-vivaldi-will-never-create-thinkcoin/">Why Vivaldi will never create ThinkCoin</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When you strip away the hype, these virtual currencies have very real repercussions for people, society, and the environment. By creating our own cryptocurrency or supporting cryptocurrency-related features in the browser, we would be helping our users to participate in what is at best a gamble and at worst a scam. It would be unethical, plain and simple. &lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://news.ycombinator.com/item?id=17927710">Noisy: Random DNS, HTTP/S traffic noise generator - Y Combinator</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;first he warned us: make sure you always use the -c flag if you’re pinging something on the internet. This is to specify the count of pings sent out. If you didn’t it would ping forever and generate too much traffic, and this useless noise would make you a “bad netizen”. He explained this and everything to us so kindly and with such sincerity it was like watching Fred Rodgers speak.&lt;/p&gt;&lt;p&gt;Now we have to randomly barf noise onto the network to maybe have a better chance at some privacy. How did we let the internet become this awful? &lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://cacm.acm.org/blogs/blog-cacm/260526-musk-buying-twitter-is-not-about-freedom-of-speech">Musk Buying Twitter Is Not About Freedom of Speech</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Yes, Twitter will wind up with different rules, results and outcomes—and it may be the better or worse for it. Along the way, some people will cheer, and others will jeer. But framing the discussion as a “free speech” issue is entirely disingenuous. This is simply a billionaire attempting to etch his world view into an algorithm—even if he brands himself a swashbuckling digital freedom fighter.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://youtu.be/3Nrt6ytbFQM?t=679">王局专访围棋国手柯洁</a>: 偶然YouTube推送的视频，20分钟充满着绝望的感觉。阐述自己悲观的原因时他说机器学一个月可能敢上一个人学十年，其实这对于很多人在平常的学习工作中可能都有一样的感觉：天才学半年顶你四五年。柯洁在以前的学习中必然也遇到过这种情况，总发现有比自己聪明或者努力的，但自己再努力超过他们就行了，毕竟顶尖的人智力差别都不大。但这次更像孙悟空和如来佛一样，上面有一个被生物规律严格规定的不可超越的存在，一个筋斗十万八千里也翻不出如来的五指，就算你再怎么精进自己，即使到百万里千万里也不可能，这才是最绝望的事。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我们职业棋手是非常大的震撼的。因为那个下法从来没有出现过，过去觉得这是要被老师教训的。有的下法我们想都没敢去想过，是它自己创造的棋。这种感觉其实是对方是一个特别高大的巨人，哪怕你装再多的武器，蚂蚁哪能撼动大象，真的是动不了。我当时觉得，人类真是可悲啊，就这样被自己创造的东西击败了。怎么都赢不了这个东西的存在。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://tech.slashdot.org/story/22/05/21/0128210/is-social-media-training-us-to-please-a-machine">Is Social Media Training Us to Please a Machine?</a> Though most of the article is cliche, this idea itself is very interesting. Content generators were used to please editors or reviewers, but now they have to please an algorithm. <a href="https://www.solidot.org/story?sid=71605">中文版：社交媒体是否在训练我们取悦机器？</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://etw.fm/192">平台：现代社会的遥远巫术</a>: 「平台」，算法黑箱，无形的大手。很有意思的一个小时谈话，与上文的取悦算法有些相关&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://it.slashdot.org/story/22/05/07/2028241/did-the-pandemic-normalize-employee-monitoring-software">Did the Pandemic Normalize Employee-Monitoring Software?</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="http://www.scitoday.cn/htmlnews/2022/7/43899.shtm">论文工厂狂造假 800 多篇材料学论文</a>: 剑桥晶体学数据中心 的结构数据库发现，近 1000 个晶体数据结构条目（涉及810篇文章）涉嫌来自中国的论文工厂。因为中国医院要求，医生只有发表论文才能评职称，结果就产生了这些不存在的小分子结构。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.qbitai.com/2022/07/36029.html">深圳某公司在每个工位都装上了监控</a><br/><img src="https://cdn.beekka.com/blogimg/asset/202207/bg2022071411.webp"/>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://sfconservancy.org/blog/2022/jun/30/give-up-github-launch/">Give Up GitHub: The Time Has Come!</a> Software Freedom Conservancy in response to GitHub announcing Copilot, which trained on FOSS software’s code, as a commercial for-profit product.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.ft.com/content/d5dbec16-3c10-4f9e-abf2-4145dd757cdc">The ever-expanding job of preserving the internet’s backpages</a>: Internet Archive is on the brink of surpassing 100 petabytes and it’s only getting harder to archive a webpage. Bypass paywall at <a href="https://archive.ph/LOtYt">archive.today</a> &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/microsoft/vscode/issues/163798">Chinese Company Pirated VSCode</a>: a very interesting one to read &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://thepointsguy.co.uk/news/wizz-air-ad-blocking-fee/">Wizz Air Charges Extra for Users with Ad-Blockers</a> &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.vice.com/en/article/jgpb3p/this-danish-political-party-is-led-by-an-ai">Danish Political Party Led by an AI</a> &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.theverge.com/2022/9/7/23342243/tim-cook-apple-rcs-imessage-android-iphone-compatibility">Tim Cook says ‘buy your mom an iPhone’ if you want RCS support in iMessage</a>: 何不食肉糜？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.bbc.com/news/business-61603624">The people making money from just surfing the internet</a>: Browser extension that sells your data directly to retail brands instead of Google. It gives you money in return. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://news.techworkerscoalition.org/2022/11/29/issue-19/">Northeastern University installed heat sensors under graduate student workers’ desks</a>: Northeaster be really have some thought here &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Generation-Digital-混迹于互联网"&gt;<a href="#Generation-Digital-混迹于互联网" class="headerlink" title="Generation Digital 混迹于互联网"></a>Generation Digital 混迹于互联网&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/ffffffff0x/Digital-Privacy/blob/master/README.zh-cn.md#%E8%BA%AB%E4%BB%BD%E7%94%9F%E6%88%90">虚拟身份生成</a>&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;<a href="https://www.fakenamegenerator.com/">Generate a Random Name</a> - 随机身份生成&lt;/li&gt;&lt;li&gt;<a href="https://www.fakeaddressgenerator.com/Index/index">Fake Address, Random Address Generator</a> - 随机身份生成&lt;/li&gt;&lt;li&gt;<a href="https://www.behindthename.com/random/">Behind the Name</a> - Random Name Generator&lt;/li&gt;&lt;li&gt;<a href="https://randomwordgenerator.com/name.php">Easy Random Name Picker</a> - Random Name Generator&lt;/li&gt;&lt;li&gt;<a href="https://www.elfqrin.com/fakeid.php">ElfQrin</a> - Fake Identity ID Random Name Generator&lt;/li&gt;&lt;li&gt;<a href="https://randomuser.me/">Random User Generator</a>&lt;/li&gt;&lt;li&gt;<a href="http://jbjb.zouri.jp/">在线身份证号码生成器</a>&lt;/li&gt;&lt;li&gt;<a href="http://jsrun.net/square?page=1&amp;s=%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7">中国大陆内地姓名、身份证号、银行卡号生成器</a>&lt;/li&gt;&lt;li&gt;<a href="https://id.ifreesite.com/">在线身份证号码生成器</a>&lt;/li&gt;&lt;li&gt;<a href="https://github.com/airob0t/idcardgenerator">airob0t/idcardgenerator 身份证图片生成工具</a>&lt;/li&gt;&lt;li&gt;<a href="https://github.com/gh0stkey/RGPerson">gh0stkey/RGPerson</a> - 随机身份生成脚本&lt;/li&gt;&lt;li&gt;<a href="https://github.com/naozibuhao/idcard">naozibuhao/idcard</a> - 身份证生成器&lt;/li&gt;&lt;li&gt;<a href="https://backgroundchecks.org/justdeleteme/fake-identity-generator/">Just Delete Me</a> - 假身份生成器(这个网站的图标,好像在哪里看过🤔)&lt;/li&gt;&lt;li&gt;<a href="https://fakepersongenerator.com/">Fake Person/Name Generator | User Identity, Account and Profile Generator</a>&lt;/li&gt;&lt;li&gt;<a href="https://cdn.rawgit.com/Marak/faker.js/master/examples/browser/index.html">faker.js</a>&lt;/li&gt;&lt;li&gt;<a href="https://www.fakepersongenerator.com/Index/generate">Fake Person/Name Generator</a>&lt;/li&gt;&lt;li&gt;<a href="https://names.igopaygo.com/people/full-contact">Full Contact Information Generator</a>&lt;/li&gt;&lt;li&gt;<a href="http://www.myfakeinfo.com/index.php">My Fake Information Generator and Validator</a>&lt;/li&gt;&lt;li&gt;<a href="https://names.igopaygo.com/">User Information Generator Articles</a>&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;<strong>图片生成</strong>&lt;/p&gt;&lt;ul&gt;&lt;li&gt;<a href="https://thispersondoesnotexist.com/">伪造人像</a>&lt;/li&gt;&lt;li&gt;<a href="https://artbreeder.com/browse">Artbreeder</a>&lt;/li&gt;&lt;li&gt;<a href="https://comixify.ii.pw.edu.pl/">Comixify</a>&lt;/li&gt;&lt;li&gt;<a href="https://www.thiswaifudoesnotexist.net/?ref=appinn">This Waifu Does Not Exist - Gwern</a>&lt;/li&gt;&lt;li&gt;<a href="https://thiscatdoesnotexist.com/">虚拟猫咪</a>&lt;/li&gt;&lt;li&gt;<a href="http://www.whichfaceisreal.com/">Which Face is Real?</a>&lt;/li&gt;&lt;li&gt;<a href="https://nvlabs.github.io/SPADE/">SPADE Project Page</a>&lt;/li&gt;&lt;li&gt;<a href="https://selfie2anime.com/">Selfie2Anime</a>&lt;/li&gt;&lt;li&gt;<a href="https://reflect.tech/faceswap/hot">Reflect.tech</a>&lt;/li&gt;&lt;li&gt;<a href="https://generated.photos/faces">Gallery of AI Generated Faces | Generated.photos</a>&lt;/li&gt;&lt;li&gt;<a href="https://pixel-me.tokyo/en">ピクセルミー | ドット絵ジェネレーター</a>&lt;/li&gt;&lt;li&gt;<a href="https://github.com/PaddlePaddle/PaddleGAN">PaddleGAN 人像生成、编辑、融合、动作迁移</a>&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.v2ex.com/t/745902?p=2">国产流氓软件必须使用时的解决方案</a>: Windows 7 Ultimate SP1 7601（老毛子のlopatkin 改装的 Windows 7 SP1 企业版简体中文精简版） 实装 TIM+微信后消耗 1G 内存，分配 1.5G &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;替代 Typora: Typora于今年七月开始强制所有用户收费，虽然想到了禁止联网这种方法但是无效，后来才知道是它早前在注册表里安了一个日期，所以不管我删掉 <code>Appdata\Roaming</code> 里的数据或者是禁网都没用。于是开始找替代的 markdown editor: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;<a href="https://github.com/marktext/marktext">marktext</a>: 几乎完美的替代品，但是对于 front matter 和一些其他语法的编辑很奇怪，无法做到所见即所得。开发者对于这个项目几乎是放养的状态，open issue上千，所以我觉得这问题永远也解决不了了，不过也是大 FOSS 软件的通病。还有一个小问题是这软件又是 electron 架构的，太恶心人了。&lt;/li&gt;&lt;li&gt;<a href="https://github.com/brrd/abricotine">abricotine</a>: 更轻量的替代品，就是渲染风格比较简陋不太喜欢 &lt;/li&gt;&lt;li&gt;<a href="https://github.com/Zettlr/Zettlr">Zettlr</a>: 比起编辑更侧重于笔记整理，最大好处是可以自定义新建文件的文件名保存格式。因为是笔记整理软件所以也更重一点，体积比 marktext 小，内存占用三个最大。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最终绕了一圈用的还是 Typora 的<a href="https://www.ghxi.com/typora.html">学习版</a>，其实不想这样做的，主要是电脑上大部分 md 文件已经保存为 Typora 默认的 <code>%date-%title.md</code> 的格式，再更改太麻烦。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/taopriest/yuu">Download Abema TV Videos</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.grc.com/incontrol.htm">InControl</a>: Easily manage Windows 10 and 11 out-of-control updating and upgrading&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.sordum.org/14479/windows-11-classic-context-menu-v1-1/">Windows 11 Classic Context Menu v1.1</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/SimonBrazell/privacy-redirect">Privacy Redirect</a>: A web extension that redirects Twitter, YouTube, Instagram, Google Maps, Reddit, Google Search &amp; Google Translate requests to privacy friendly alternative frontends&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Copy Files: use <a href="https://www.codesector.com/teracopy">teracopy</a> for stability, use <a href="https://fastcopy.jp/">fastcopy</a> for speed. Also teracopy can directly replaces windows copy hotkeys &amp; drag drop, so use teracopy in general. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Quote"&gt;<a href="#Quote" class="headerlink" title="Quote"></a>Quote&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.douglasadams.com/dna/19990901-00-a.html">How to Stop Worrying and Learn to Love the Internet</a>, from Douglas Adams, also collected in The Salmon of Doubt &lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;everything that’s already in the world when you’re born is just normal&lt;/li&gt;&lt;li&gt;anything that gets invented between then and before you turn thirty is incredibly exciting and creative and with any luck you can make a career out of it&lt;/li&gt;&lt;li&gt;anything that gets invented after you’re thirty is against the natural order of things and the beginning of the end of civilization as we know it until it’s been around for about ten years when it gradually turns out to be alright really.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="http://smith-at-sfsu.net/Documents/HilbertRadio/HilbertRadio.pdf">David Hilbert’s Radio Address</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;For us there is no ignorabimus. &lt;/p&gt;&lt;p&gt;Wir müssen wissen, Wir werden wissen.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="http://archive.is/20120711223115/kerneltrap.org/node/4484">Are you optimistic about the free software movement?</a> - Richard Stallman&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I am a pessimist by nature. Many people can only keep on fighting when they expect to win. I’m not like that, I always expect to lose. I fight anyway, and sometimes I win.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.whitehouse.gov/briefing-room/speeches-remarks/2022/01/24/remarks-by-president-biden-before-meeting-with-the-white-house-competition-council/">Remarks by President Biden Before Meeting with the White House Competition Council</a> - Joe Biden, 46th President of the United States&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;No, it’s a great asset. More inflation. What a stupid son of a bitch.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.nature.com/articles/427297a">A meeting with Enrico Fermi</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“There are two ways of doing calculations in theoretical physics”, he said. “One way, and this is the way I prefer, is to have a clear physical picture of the process that you are calculating. The other way is to have a precise and self-consistent mathematical formalism. You have neither.”&lt;/p&gt;&lt;p&gt;In desperation I asked Fermi whether he was not impressed by the agreement between our calculated numbers and his measured numbers. He replied, “How many arbitrary parameters did you use for your calculations?” I thought for a moment about our cut-off procedures and said, “Four.” He said, “I remember my friend Johnny von Neumann used to say, with four parameters I can fit an elephant, and with five I can make him wiggle his trunk.” &lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="">Your Map is Wrong</a>, Mark Zuckerberg on Web 2.0 Summit (2010/11)&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Your map is wrong. The biggest part of the map has to be uncharted territory. This map makes it seem like it’s zero-sum, but it’s not. We’re building value, not just taking it away from someone else.&lt;/p&gt;&lt;p&gt;<img src="https://techcrunch.com/wp-content/uploads/2010/11/zuckmap.jpg" alt="the not yet lizard Zuck"/>&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.timescale.com/blog/how-postgresql-views-and-materialized-views-work-and-how-they-influenced-timescaledb-continuous-aggregates/">A friend who had just finished his PhD</a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Don’t squander your ignorance. Once you learn something, you end up taking it for granted and it becomes so much harder to overcome your tacit knowledge and ask simple, but important, questions.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.pcmag.com/news/heres-why-craigslist-still-looks-the-same-after-25-plus-years">Why Craigslist Still Looks the Same After 25+ Years</a>: <a href="https://www.solidot.org/story?sid=72795"><em>Solidot</em></a>&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Because that serves people better. I’ve learned that people want stuff that is simple and fast and gets the job done. People don’t need fancy stuff. Sometimes you just want to get through the day.&lt;/p&gt;&lt;p&gt;For me as an engineer, simple is beautiful. Functional is beautiful.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Prospect-观天下"&gt;<a href="#Prospect-观天下" class="headerlink" title="Prospect 观天下"></a>Prospect 观天下&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.popularmechanics.com/science/a35405652/chicago-lighting-railroads-on-fire-switch-heaters-winter/">Why Chicago Is Lighting Its Railroads on Fire</a><br/><img src="https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/screen-shot-2021-02-03-at-2-01-51-pm-1612379047.png"/>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="http://illusionoftheyear.com/2021/12/emergent-city-flyby-with-colossus/">Emergent City Flyby with Colossus</a>: just some arbitrary dots when see in still, but it becomes cities when see in motion. &lt;/p&gt;&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/yC5kHTsmXqQ?start=7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.dezeen.com/2022/08/03/ascent-tower-milwaukee-worlds-tallest-timber-building/">Ascent, world’s tallest timber building</a> &lt;/p&gt;&lt;p&gt;<img src="https://static.dezeen.com/uploads/2022/08/ascent-tower-by-korb-associates-architects-milwaukee_dezeen_2364_col_3.jpg"/>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://dudubaby.github.io/">嘟嘟宝贝 陈怡馨 Archive</a>: 我各种 Archive 也看过一些，但是这么完整精美的真是头一次见。最难能可贵的是本网站的关于页和 GitHub 中 Readme 写得特别详细，作者一定也是个非常心细善良的人。（在写下上面一段文字后我手贱去看了一下，<a href="https://github.com/zmwangx">作者</a>是个普林的高能物理博士，斯坦福的本科…行吧，果然是这种人……我该说惊讶呢还是毫不惊讶呢）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Others-杂七杂八"&gt;<a href="#Others-杂七杂八" class="headerlink" title="Others 杂七杂八"></a>Others 杂七杂八&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.solidot.org/story?sid=70495">《塞尔达传说时之笛》PC 移植版准备下个月发布</a>: 完整的时之笛反编译&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.economist.com/business/2022/01/07/the-rise-of-performative-work">The rise of performative work - the Economist</a>, more like College Classroom 101(Bypass paywall at <a href="http://archive.today/RJQQX">http://archive.today/RJQQX</a>)&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Satya Nadella, the boss of Microsoft, says that comments in chat help him to meet colleagues he would not otherwise hear from. Maybe so, but that is an irresistible incentive to pose questions that do not need answering and offer observations that are not worth making.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.acgpiping.net/2022/10143/bookreview_9784767491134/">为语言多样性现象点灯之作——《〈役割語〉小辞典》读后感</a>：从文字层面保护语音语调层面的「役割語」，或者说方言&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;以上海为主题的视频创作者G僧东在不少视频里提倡要认识上海方言里的正字，即那些普通话中不常听、不常见但频频出现在方言口头表述中的词所对应的汉字。我觉得这是一个有益的提议，找出了方言里的正字，便有助于探索其传播和演变的过程，及其所象征的人群形象。而这些考察就如同本书《〈役割語〉小辞典》所提到的那样，会反过来被运用到更多作品的创作中，形成一个个固定的角色形象用词，为语言的丰富和多样性注入活力。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://mp.weixin.qq.com/s/0lTaNs0gIRKuUQ1DedFL7g">胡萝卜周因一氧化碳中毒而意外身亡</a> 一路走好&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/MathewSachin/Captura/issues/405#issuecomment-657065501">End of Life of Captura</a>: 偶然找到的实用录屏软件，但是由于可耻的将开源软件套壳收费行为，作者选择了停止更新&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://zh.moegirl.org.cn/%E7%8E%8B%E5%B7%8D">王巍 - 萌娘百科</a>: 什么绝对的六边形战士，果宝特攻猪猪侠的编剧导演配音曲词3D引擎开发动画制作，全你一个人啊？！&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Deploy a Reddit Bot on Heroku</title><link href="https://yao-lirong.github.io/2022/09/03/deploy-a-reddit-bot-on-heroku.html" rel="alternate" type="text/html" title="Deploy a Reddit Bot on Heroku"/><published>2022-09-03T16:00:00+00:00</published><updated>2022-09-03T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2022/09/03/deploy-a-reddit-bot-on-heroku</id><content type="html" xml:base="https://yao-lirong.github.io/2022/09/03/deploy-a-reddit-bot-on-heroku.html"><![CDATA[<p>I’ve created a bot to send warm welcomes to newly admitted Cornell prefrosh. </p> <p><span id="more"></span>&lt;h2 id="Simple-Auto-Reply-Bot"&gt;<a href="#Simple-Auto-Reply-Bot" class="headerlink" title="Simple Auto-Reply Bot"></a>Simple Auto-Reply Bot&lt;/h2&gt;&lt;p&gt;This <a href="https://praw.readthedocs.io/en/latest/tutorials/reply_bot.html">Let Me Google It For You Bot</a> tutorial perfectly explains how to listen to reddit post stream and reply to a post. &lt;/p&gt;&lt;p&gt;We use the following code to declare a reddit bot:&lt;/p&gt;<figure class="highlight python">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">reddit = praw.Reddit(</span><br/><span class="line"> client_id=<span class="string">"CLIENT_ID"</span>,</span><br/><span class="line"> client_secret=<span class="string">"CLIENT_SECRET"</span>,</span><br/><span class="line"> username=<span class="string">"USERNAME"</span>,</span><br/><span class="line"> password=<span class="string">"PASSWORD"</span>,</span><br/><span class="line"> user_agent=<span class="string">"LMGTFY (by u/USERNAME)"</span>,</span><br/><span class="line">)</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;If we want to put our code onto GitHub, this will expose our client secret and account password. Therefore, we can make a separate file called <a href="https://praw.readthedocs.io/en/latest/getting_started/configuration/prawini.html"><code>praw.ini</code></a>, where we specify these private information. Note an <code>ini</code> file cannot contain most special characters, so you need to change your password to only words and digits. &lt;/p&gt;<figure class="highlight ini">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="section">[bot527]</span></span><br/><span class="line"><span class="attr">client_id</span>=d123071240924w</span><br/><span class="line"><span class="attr">client_secret</span>=D123412541254</span><br/><span class="line"><span class="attr">username</span>=Harmonya<span class="literal">no</span></span><br/><span class="line"><span class="attr">password</span>=YouthinkIwillTellYouThisHuh</span><br/><span class="line"><span class="attr">user_agent</span>=bot</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;With this, we can declare our bot with the following command. Note the customize name “bot527” need to match in both the <code>ini</code> file and the declaration . &lt;/p&gt;<figure class="highlight python">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">reddit = praw.Reddit(<span class="string">"bot527"</span>)</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Deploy-on-Heroku"&gt;<a href="#Deploy-on-Heroku" class="headerlink" title="Deploy on Heroku"></a>Deploy on Heroku&lt;/h2&gt;&lt;p&gt;Create a Heroku app, follow the instructions in Deploy/Heroku Git tab. &lt;/p&gt;&lt;p&gt;For a Heroku app to run, it needs several additional files:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;<code>Runtime.txt</code>: Though it’s in question whether this is really needed or not (the app runs normally too without it?)&lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">python-3.7.9</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<code>Procfile</code>: This is a Heroku specific file that declares what command Heroku should execute to start your app. A detailed explanation in <a href="https://www.reddit.com/r/redditdev/comments/kyrn1u/i_want_to_run_my_reddit_bot_on_heroku_what_do_i/gjid6jt/">here</a> &lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">worker: python bot.py</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<code>requirements.txt</code>: python package requirements, obtained by <code>pip freeze &gt; requirements.txt</code>&lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">praw==7.6.0</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Finally, after you deploying all the codes to Heroku, DON”T FORGET THE MOST IMPORTNAT PART: you need to turn on the resources tab on Heroku for your worker (spent 1h figuring this out). For where to find it, watch <a href="https://youtu.be/BPvg9bndP1U?t=747">this video</a> &lt;/p&gt;&lt;h2 id="Submit-amp-Edit-a-Post"&gt;<a href="#Submit-amp-Edit-a-Post" class="headerlink" title="Submit &amp; Edit a Post"></a>Submit &amp; Edit a Post&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://praw.readthedocs.io/en/latest/code_overview/models/subreddit.html#praw.models.Subreddit.submit">Submit a Post onto a Subreddit</a>: <code>submission = reddit.subreddit(&quot;test&quot;).submit(&quot;title&quot;, selftext=text)</code>&lt;/li&gt;&lt;li&gt;<a href="https://praw.readthedocs.io/en/latest/code_overview/models/submission.html#praw.models.Submission.edit">Edit an Existed Post</a>: <code>submission.edit(body=submission.body + &quot;edited&quot;)</code>&lt;/li&gt;&lt;/ul&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve created a bot to send warm welcomes to newly admitted Cornell prefrosh.]]></summary></entry><entry><title type="html">JavaScript Manual</title><link href="https://yao-lirong.github.io/2022/06/10/javascript-manual.html" rel="alternate" type="text/html" title="JavaScript Manual"/><published>2022-06-10T16:00:00+00:00</published><updated>2022-06-10T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2022/06/10/javascript-manual</id><content type="html" xml:base="https://yao-lirong.github.io/2022/06/10/javascript-manual.html"><![CDATA[<p>I hate web programming, but looks like I really have to learn it. Notes from <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/">Liao Xuefeng’s JS course</a></p> <p><span id="more"></span>&lt;h2 id="Introduction"&gt;<a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction&lt;/h2&gt;&lt;h3 id="Variables-and-Objects"&gt;<a href="#Variables-and-Objects" class="headerlink" title="Variables and Objects"></a>Variables and Objects&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Declare a variable with <code>var</code>: <code>var x = 3</code>&lt;/li&gt;&lt;li&gt;JavaScript has both <code>null</code> and <code>undefined</code>, but most of the time we just use <code>null</code>&lt;/li&gt;&lt;li&gt;Print out value in browser: <code>console.log()</code>&lt;/li&gt;&lt;li&gt;Ternary if-else Operator: <code>condition ? then : else</code>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Strict-Mode"&gt;<a href="#Strict-Mode" class="headerlink" title="Strict Mode"></a><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023020925712064">Strict Mode</a>&lt;/h3&gt;&lt;p&gt;JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">i = <span class="number">10</span>; <span class="comment">// i现在是全局变量</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。&lt;/p&gt;&lt;p&gt;与之相对，使用<code>var</code>申明的变量是局部变量。&lt;/p&gt;&lt;p&gt;在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。启用strict模式的方法是在JavaScript代码的第一行写上：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="meta">'use strict'</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Strings"&gt;<a href="#Strings" class="headerlink" title="Strings"></a>Strings&lt;/h3&gt;&lt;p&gt;Strings are immutable in JS. &lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</span><br/><span class="line">s.length; <span class="comment">// 13</span></span><br/><span class="line"></span><br/><span class="line">s[<span class="number">6</span>]; <span class="comment">// ' '</span></span><br/><span class="line">s[<span class="number">13</span>]; <span class="comment">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 可以用 + 链接多个字符串，但也有一种更简洁的方法可以在字符串中嵌套其他变量</span></span><br/><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br/><span class="line"><span class="keyword">var</span> message = <span class="string">"你好, ${name}"</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Array"&gt;<a href="#Array" class="headerlink" title="Array"></a>Array&lt;/h3&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br/><span class="line">arr.length; <span class="comment">// 6</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;You can assign values to array, but 如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br/><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>; <span class="comment">// arr == [1, 99, 3]</span></span><br/><span class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>; <span class="comment">// arr == [1, 2, 3, undefined, undefined, 'x']</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;ul&gt;&lt;li&gt;<code>arr.push(e)</code> adds variable e to the end of the array, <code>arr.pop()</code> delete an element from the end of the array&lt;/li&gt;&lt;li&gt;<code>arr.unshift(e)</code> adds variable e to the beginning of the array, <code>arr.shift()</code> delete an element from the beginning of the array&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Object"&gt;<a href="#Object" class="headerlink" title="Object"></a>Object&lt;/h3&gt;&lt;p&gt;JavaScript Object is a key-value map that can be accessed both in traditional object way and the python dict way. &lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> xiaohong = {</span><br/><span class="line"> <span class="attr">name</span>: <span class="string">'小红'</span>,</span><br/><span class="line"> <span class="attr">birth</span>: <span class="number">1990</span>,</span><br/><span class="line"> <span class="attr">tags</span>: [<span class="string">'js'</span>, <span class="string">'web'</span>, <span class="string">'mobile'</span>],</span><br/><span class="line"><span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span>};</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;<code>xiaohong</code> 的属性名 <code>middle-school</code> 不是一个有效的变量，就需要用<code>&#39;&#39;</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用 <code>[&#39;xxx&#39;]</code> 来访问。其他规则的变量虽然也可以用 <code>xiaohong[&#39;name&#39;]</code> 来访问 <code>xiaohong</code> 的 <code>name</code> 属性，不过 <code>xiaohong.name</code> 的写法更简洁。&lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">xiaohong['middle-school']; // 'No.1 Middle School'</span><br/><span class="line">xiaohong['name']; // '小红'</span><br/><span class="line">xiaohong.name; // '小红'</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;给不存在的属性赋值以声明新的属性，也可以使用 <code>delete</code> 删除一个既有的属性&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">xiaoming.age = <span class="number">18</span>; <span class="comment">// 新增一个age属性</span></span><br/><span class="line">xiaoming.age; <span class="comment">// 18</span></span><br/><span class="line"><span class="keyword">delete</span> xiaoming.age; <span class="comment">// 删除age属性</span></span><br/><span class="line">xiaoming.age; <span class="comment">// undefined</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;Use <code>in</code> to detect whether an object has a certain property. 不过要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是<code>xiaoming</code>的，它可能是<code>xiaoming</code>继承得到的。比如 <code>toString</code> 定义在 <code>object</code> 对象中，而所有对象都继承 <code>object</code>，所以 <code>xiaoming</code> 也拥有 <code>toString</code> 属性。要判断一个属性是否是<code>xiaoming</code>自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="string">'name'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true </span></span><br/><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></span><br/><span class="line">xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br/><span class="line">xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Loop"&gt;<a href="#Loop" class="headerlink" title="Loop"></a>Loop&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;for loop: <code>for (i=0; i&lt;arr.length; i++) &#123;...&#125;</code>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;for of loop: <code>for (var key of xiaoming) &#123;...&#125;</code>. This is a better version of for in loop JS has. To filter out those inherited properties, use&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> xiaoming) {</span><br/><span class="line"> <span class="keyword">if</span> (xiaoming.hasOwnProperty(key)) {</span><br/><span class="line"> <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'city'</span></span><br/><span class="line"> } }</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;while loop: <code>while (n &gt; 0) &#123; ... &#125;</code>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;do while loop: <code>do &#123; ... &#125; while()</code>&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="Function"&gt;<a href="#Function" class="headerlink" title="Function"></a>Function&lt;/h2&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>{</span><br/><span class="line"> <span class="keyword">return</span> x;</span><br/><span class="line">};</span><br/><span class="line"></span><br/><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>{</span><br/><span class="line"> <span class="keyword">return</span> x;</span><br/><span class="line">}</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">abs(<span class="number">10</span>, <span class="string">'blablabla'</span>); <span class="comment">// 返回10</span></span><br/><span class="line">abs(-<span class="number">9</span>, <span class="string">'haha'</span>, <span class="string">'hehe'</span>, <span class="literal">null</span>); <span class="comment">// 返回9</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;传入的参数比定义的少也没有问题：此时<code>abs(x)</code>函数的参数<code>x</code>将收到<code>undefined</code>，计算结果为<code>NaN</code>。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">abs(); <span class="comment">// 返回NaN</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="JSON"&gt;<a href="#JSON" class="headerlink" title="JSON"></a>JSON&lt;/h2&gt;&lt;p&gt;JSON 是 JavaScript Object Notation 的缩写，实际上是 JavaScript 的一个子集。所以我们可以非常方便地将 Java Object 转换成 JSON。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify(xiaoming, <span class="literal">null</span>, <span class="string">" "</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;要输出得好看一些，可以加上参数，按缩进输出：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="built_in">JSON</span>.stringify(xiaoming, <span class="literal">null</span>, <span class="string">' '</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;第二个参数用于控制如何筛选对象的键值，如果我们只想输出指定的属性，可以传入<code>Array</code>：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="built_in">JSON</span>.stringify(xiaoming, [<span class="string">'name'</span>, <span class="string">'birth'</span>], <span class="string">' '</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;结果：&lt;/p&gt;<figure class="highlight json">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">{ <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br/><span class="line"> <span class="attr">"birth"</span>: <span class="number">1990</span>}</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;还可以传入一个函数，这样对象的每个键值对都会被函数先处理：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">key, value</span>) </span>{</span><br/><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>) {</span><br/><span class="line"> <span class="keyword">return</span> value.toUpperCase();</span><br/><span class="line"> }</span><br/><span class="line"> <span class="keyword">return</span> value;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="built_in">JSON</span>.stringify(xiaoming, convert, <span class="string">' '</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;上面的代码把所有属性值都变成大写：&lt;/p&gt;<figure class="highlight json">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">{</span><br/><span class="line"> <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br/><span class="line"> <span class="attr">"birth"</span>: <span class="number">1990</span>,</span><br/><span class="line"> 'middle-school': 'No<span class="number">.1</span> MIDDLE SCHOOL'</span><br/><span class="line">}</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;如果我们还想要精确控制如何序列化小明，可以给<code>xiaoming</code>定义一个<code>toJSON()</code>的方法，直接返回JSON应该序列化的数据：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> xiaoming = {</span><br/><span class="line"> <span class="attr">name</span>: <span class="string">'小明'</span>,</span><br/><span class="line"> <span class="attr">age</span>: <span class="number">14</span>,</span><br/><span class="line"> <span class="attr">birth</span>: <span class="number">1990</span>,</span><br/><span class="line"> middle-school: <span class="string">'No.1 MIDDLE SCHOOL'</span></span><br/><span class="line"> <span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="keyword">return</span> { <span class="comment">// 只输出name和age，并且改变了key：</span></span><br/><span class="line"> <span class="string">'Name'</span>: <span class="built_in">this</span>.name,</span><br/><span class="line"> <span class="string">'Age'</span>: <span class="built_in">this</span>.age</span><br/><span class="line"> };</span><br/><span class="line"> }</span><br/><span class="line">};</span><br/><span class="line"></span><br/><span class="line"><span class="built_in">JSON</span>.stringify(xiaoming); <span class="comment">// '{"Name":"小明","Age":14}'</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;拿到一个JSON格式的字符串，我们直接用<code>JSON.parse()</code>把它变成一个JavaScript对象：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'[1,2,3,true]'</span>); <span class="comment">// [1, 2, 3, true]</span></span><br/><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'{"name":"小明","age":14}'</span>); <span class="comment">// Object {name: '小明', age: 14}</span></span><br/><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'true'</span>); <span class="comment">// true</span></span><br/><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'123.45'</span>); <span class="comment">// 123.45</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="jQuery"&gt;<a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery&lt;/h2&gt;&lt;p&gt;<code>$</code> is an alias to <code>jQuery</code>. Therefore, if you encounter error <code>Uncaught TypeError: $ is not a function</code>, you can just replace the <code>$</code> with <code>jQuery</code> instead (e.g. <code>jQuery(&#39;#abc&#39;)</code>)&lt;/p&gt;&lt;h3 id="Intro-to-Selector"&gt;<a href="#Intro-to-Selector" class="headerlink" title="Intro to Selector"></a>Intro to Selector&lt;/h3&gt;&lt;h4 id="jQuery-Object"&gt;<a href="#jQuery-Object" class="headerlink" title="jQuery Object"></a>jQuery Object&lt;/h4&gt;&lt;p&gt;一个 jQuery 命令返回的对象是 jQuery 对象。它类似数组，每个元素都是一个引用了DOM节点的对象。以下面的查找为例，&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;如果<code>id</code>为<code>abc</code>的<code>&lt;div&gt;</code>存在，返回的jQuery对象如下：&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">[<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"abc"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span>]</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果<code>id</code>为<code>abc</code>的<code>&lt;div&gt;</code>不存在，返回的jQuery对象如下：&lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">[]</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之jQuery的选择器不会返回<code>undefined</code>或者<code>null</code>，这样的好处是你不必在下一行判断<code>if (div === undefined)</code>。&lt;/p&gt;&lt;p&gt;jQuery对象和DOM对象之间可以互相转化：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> div = $(<span class="string">'#abc'</span>); <span class="comment">// jQuery对象</span></span><br/><span class="line"><span class="keyword">var</span> divDom = div.get(<span class="number">0</span>); <span class="comment">// 假设存在div，获取第1个DOM元素</span></span><br/><span class="line"><span class="keyword">var</span> another = $(divDom); <span class="comment">// 重新把DOM包装为jQuery对象</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;通常情况下你不需要获取DOM对象，直接使用jQuery对象更加方便。如果你拿到了一个DOM对象，那可以简单地调用<code>$(aDomObject)</code>把它变成jQuery对象，这样就可以方便地使用jQuery的API了。&lt;/p&gt;&lt;h4 id="按ID查找"&gt;<a href="#按ID查找" class="headerlink" title="按ID查找"></a>按ID查找&lt;/h4&gt;&lt;p&gt;在ID前加上 <code>#</code> 以进行ID查找&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">// 查找&lt;div id="abc"&gt;:</span></span><br/><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#abc'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="按tag查找"&gt;<a href="#按tag查找" class="headerlink" title="按tag查找"></a>按tag查找&lt;/h4&gt;&lt;p&gt;直接写上tag名称进行tag查找：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> ps = $(<span class="string">'p'</span>); <span class="comment">// 返回所有&lt;p&gt;节点</span></span><br/><span class="line">ps.length; <span class="comment">// 数一数页面有多少个&lt;p&gt;节点</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="按class查找"&gt;<a href="#按class查找" class="headerlink" title="按class查找"></a>按class查找&lt;/h4&gt;&lt;p&gt;在class名称前加一个<code>.</code> 进行按class查找&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> a = $(<span class="string">'.red'</span>); <span class="comment">// 所有节点包含<code class="language-plaintext highlighter-rouge">class=&amp;quot;red&amp;quot;</code>都将返回</span></span><br/><span class="line"><span class="comment">// 例如:</span></span><br/><span class="line"><span class="comment">// &lt;div class="red"&gt;…&lt;/div&gt;</span></span><br/><span class="line"><span class="comment">// &lt;p class="green red"&gt;…&lt;/p&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;通常很多节点有多个class，我们可以查找同时包含<code>red</code>和<code>green</code>的节点：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> a = $(<span class="string">'.red.green'</span>); <span class="comment">// 注意没有空格！</span></span><br/><span class="line"><span class="comment">// 符合条件的节点：</span></span><br/><span class="line"><span class="comment">// &lt;div class="red green"&gt;…&lt;/div&gt;</span></span><br/><span class="line"><span class="comment">// &lt;div class="blue green red"&gt;…&lt;/div&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="按属性查找"&gt;<a href="#按属性查找" class="headerlink" title="按属性查找"></a>按属性查找&lt;/h4&gt;&lt;p&gt;一个DOM节点除了<code>id</code>和<code>class</code>外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> email = $(<span class="string">'[name=email]'</span>); <span class="comment">// 找出&lt;??? name="email"&gt;</span></span><br/><span class="line"><span class="keyword">var</span> passwordInput = $(<span class="string">'[type=password]'</span>); <span class="comment">// 找出&lt;??? type="password"&gt;</span></span><br/><span class="line"><span class="keyword">var</span> a = $(<span class="string">'[items="A B"]'</span>); <span class="comment">// 找出&lt;??? items="A B"&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;当属性的值包含空格等特殊字符时，需要用双引号括起来。&lt;/p&gt;&lt;p&gt;按属性查找还可以使用前缀查找或者后缀查找：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> icons = $(<span class="string">'[name^=icon]'</span>); <span class="comment">// 找出所有name属性值以icon开头的DOM</span></span><br/><span class="line"><span class="comment">// 例如: name="icon-1", name="icon-2"</span></span><br/><span class="line"><span class="keyword">var</span> names = $(<span class="string">'[name$=with]'</span>); <span class="comment">// 找出所有name属性值以with结尾的DOM</span></span><br/><span class="line"><span class="comment">// 例如: name="startswith", name="endswith"</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;这个方法尤其适合通过class属性查找，且不受class包含多个名称的影响：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> icons = $(<span class="string">'[class^="icon-"]'</span>); <span class="comment">// 找出所有class包含至少一个以<code class="language-plaintext highlighter-rouge">icon-</code>开头的DOM</span></span><br/><span class="line"><span class="comment">// 例如: class="icon-clock", class="abc icon-home"</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="AND查找"&gt;<a href="#AND查找" class="headerlink" title="AND查找"></a>AND查找&lt;/h4&gt;&lt;p&gt;直接写多个条件，条件间不加空格来执行AND查找。&lt;/p&gt;&lt;p&gt;如果我们查找<code>$(&#39;[name=email]&#39;)</code>，很可能把表单外的<code>&lt;div name=&quot;email&quot;&gt;</code>也找出来，但我们只希望查找<code>&lt;input&gt;</code>，就可以这么写：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> emailInput = $(<span class="string">'input[name=email]'</span>); <span class="comment">// 不会找出&lt;div name="email"&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;前文中的同时查找多个class也是一个例子。同样的，根据tag和class来组合查找也很常见：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> tr = $(<span class="string">'tr.red'</span>); <span class="comment">// 找出&lt;tr class="red …"&gt;…&lt;/tr&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="OR查找"&gt;<a href="#OR查找" class="headerlink" title="OR查找"></a>OR查找&lt;/h4&gt;&lt;p&gt;把多个选择器用<code>,</code>组合起来，查找所有符合任一选择器条件的 DOM 节点。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'p,div'</span>); <span class="comment">// 把&lt;p&gt;和&lt;div&gt;都选出来</span></span><br/><span class="line">$(<span class="string">'p.red,p.green'</span>); <span class="comment">// 把&lt;p class="red"&gt;和&lt;p class="green"&gt;都选出来</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;要注意的是，选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。例如，<code>&lt;p class=&quot;red green&quot;&gt;</code>不会被上面的<code>$(&#39;p.red,p.green&#39;)</code>选择两次。&lt;/p&gt;&lt;h3 id="Descendent-Selector"&gt;<a href="#Descendent-Selector" class="headerlink" title="Descendent Selector"></a>Descendent Selector&lt;/h3&gt;&lt;p&gt;以如下结构为例&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">&lt;!– HTML结构 –&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"testing"</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"lang"</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lang-javascript"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lang-python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lang-lua"</span>&gt;</span>Lua<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="层级选择器（Descendant-Selector）"&gt;<a href="#层级选择器（Descendant-Selector）" class="headerlink" title="层级选择器（Descendant Selector）"></a>层级选择器（Descendant Selector）&lt;/h4&gt;&lt;p&gt;如果两个DOM元素具有层级关系，就可以用<code>$(&#39;ancestor descendant&#39;)</code>来选择，层级之间用空格隔开。&lt;/p&gt;&lt;p&gt;要选出上例中的 JavaScript，可以用层级选择器：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'ul.lang li.lang-javascript'</span>); <span class="comment">// [&lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt;]</span></span><br/><span class="line">$(<span class="string">'div.testing li.lang-javascript'</span>); <span class="comment">// [&lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt;]</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;因为<code>&lt;div&gt;</code>和<code>&lt;ul&gt;</code>都是<code>&lt;li&gt;</code>的祖先节点，所以上面两种方式都可以选出相应的<code>&lt;li&gt;</code>节点。&lt;/p&gt;&lt;p&gt;要选择所有的<code>&lt;li&gt;</code>节点，用：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'ul.lang li'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;这种层级选择器相比单个的选择器好处在于，它缩小了选择范围，因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素。例如：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'form[name=upload] input'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;就把选择范围限定在<code>name</code>属性为<code>upload</code>的表单里。如果页面有很多表单，其他表单的<code>&lt;input&gt;</code>不会被选择。&lt;/p&gt;&lt;p&gt;多层嵌套也是允许的：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'form.test p input'</span>); <span class="comment">// 在form表单选择被&lt;p&gt;包含的&lt;input&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="子选择器（Child-Selector）"&gt;<a href="#子选择器（Child-Selector）" class="headerlink" title="子选择器（Child Selector）"></a>子选择器（Child Selector）&lt;/h4&gt;&lt;p&gt;Child Selector <code>$(&#39;parent&gt;child&#39;)</code> 与 Descendant Selector 几乎完全一样，但是限定了层级关系必须是父子关系，就是<code>&lt;child&gt;</code>节点必须是<code>&lt;parent&gt;</code>节点的直属子节点。还是以上面的例子：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'ul.lang&gt;li.lang-javascript'</span>); <span class="comment">// 可以选出[&lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt;]</span></span><br/><span class="line">$(<span class="string">'div.testing&gt;li.lang-javascript'</span>); <span class="comment">// [], 无法选出，因为&lt;div&gt;和&lt;li&gt;不构成父子关系</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="过滤器（Filter）"&gt;<a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）&lt;/h4&gt;&lt;p&gt;过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'ul.lang li'</span>); <span class="comment">// 选出JavaScript、Python和Lua 3个节点</span></span><br/><span class="line"></span><br/><span class="line">$(<span class="string">'ul.lang li:first-child'</span>); <span class="comment">// 仅选出JavaScript</span></span><br/><span class="line">$(<span class="string">'ul.lang li:last-child'</span>); <span class="comment">// 仅选出Lua</span></span><br/><span class="line">$(<span class="string">'ul.lang li:nth-child(2)'</span>); <span class="comment">// 选出第N个元素，N从1开始</span></span><br/><span class="line">$(<span class="string">'ul.lang li:nth-child(even)'</span>); <span class="comment">// 选出序号为偶数的元素</span></span><br/><span class="line">$(<span class="string">'ul.lang li:nth-child(odd)'</span>); <span class="comment">// 选出序号为奇数的元素</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="查找和过滤"&gt;<a href="#查找和过滤" class="headerlink" title="查找和过滤"></a>查找和过滤&lt;/h3&gt;&lt;p&gt;本节使用如下例子&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">&lt;!– HTML结构 –&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"lang"</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"js dy"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dy"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"swift"</span>&gt;</span>Swift<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dy"</span>&gt;</span>Scheme<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">"haskell"</span>&gt;</span>Haskell<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="查找"&gt;<a href="#查找" class="headerlink" title="查找"></a>查找&lt;/h4&gt;&lt;p&gt;用<code>find()</code>查找：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> ul = $(<span class="string">'ul.lang'</span>); <span class="comment">// 获得&lt;ul&gt;</span></span><br/><span class="line"><span class="keyword">var</span> dy = ul.find(<span class="string">'#swift'</span>); <span class="comment">// 获得 Lua</span></span><br/><span class="line"><span class="keyword">var</span> equiv = $(<span class="string">'ul.lang&gt;#swift'</span>); <span class="comment">// 与前两行等效</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="节点中移动"&gt;<a href="#节点中移动" class="headerlink" title="节点中移动"></a>节点中移动&lt;/h4&gt;&lt;p&gt;此小节介绍的所有函数都是当无参数调用时，返回目标节点。传入参数时，参数是过滤条件，当符合条件时返回目标节点，不符合时返回空 jQuery 对象&lt;/p&gt;&lt;p&gt;如果要从当前节点开始向上查找，使用<code>parent()</code>方法：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> swf = $(<span class="string">'#swift'</span>); <span class="comment">// 获得Swift</span></span><br/><span class="line"><span class="keyword">var</span> parent = swf.parent(); <span class="comment">// 获得Swift的上层节点&lt;ul&gt;</span></span><br/><span class="line"><span class="keyword">var</span> a = swf.parent(<span class="string">'.red'</span>); <span class="comment">// 获得Swift的上层节点&lt;ul&gt;，同时传入过滤条件。如果ul不符合条件，返回空jQuery对象</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;对于位于同一层级的节点，可以通过<code>next()</code>和<code>prev()</code>方法，例如当我们已经拿到<code>Swift</code>节点后：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> swift = $(<span class="string">'#swift'</span>);</span><br/><span class="line"></span><br/><span class="line">swift.next(); <span class="comment">// Scheme</span></span><br/><span class="line">swift.next(<span class="string">'[name=haskell]'</span>); <span class="comment">// 空的jQuery对象，因为Swift的下一个元素Scheme不符合条件[name=haskell]</span></span><br/><span class="line"></span><br/><span class="line">swift.prev(); <span class="comment">// Python</span></span><br/><span class="line">swift.prev(<span class="string">'.dy'</span>); <span class="comment">// Python，因为Python同时符合过滤器条件.dy</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="函数式编程"&gt;<a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程&lt;/h4&gt;&lt;p&gt;<code>filter()</code>方法可以过滤掉不符合选择器条件的节点：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> langs = $(<span class="string">'ul.lang li'</span>); <span class="comment">// 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span><br/><span class="line"><span class="keyword">var</span> a = langs.filter(<span class="string">'.dy'</span>); <span class="comment">// 拿到JavaScript, Python, Scheme</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;或者传入一个函数，要特别注意函数内部的<code>this</code>被绑定为DOM对象，不是jQuery对象：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> langs = $(<span class="string">'ul.lang li'</span>); <span class="comment">// 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span><br/><span class="line">langs.filter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.innerHTML.indexOf(<span class="string">'S'</span>) === <span class="number">0</span>; <span class="comment">// 返回S开头的节点</span></span><br/><span class="line">}); <span class="comment">// 拿到Swift, Scheme</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;<code>map()</code>方法把一个jQuery对象包含的若干DOM节点转化为其他对象：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> langs = $(<span class="string">'ul.lang li'</span>); <span class="comment">// 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span><br/><span class="line"><span class="keyword">var</span> arr = langs.map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.innerHTML;</span><br/><span class="line">}).get(); <span class="comment">// 用get()拿到包含string的Array：['JavaScript', 'Python', 'Swift', 'Scheme', 'Haskell']</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Modifying-DOM-Contents"&gt;<a href="#Modifying-DOM-Contents" class="headerlink" title="Modifying DOM Contents"></a>Modifying DOM Contents&lt;/h3&gt;&lt;h4 id="HTML"&gt;<a href="#HTML" class="headerlink" title="HTML"></a>HTML&lt;/h4&gt;&lt;p&gt;本小节使用以下例子：&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">&lt;!– HTML结构 –&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"test-ul"</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"js"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">"book"</span>&gt;</span>Java <span class="symbol">&amp;amp;</span> JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;使用 <code>text()</code> 和 <code>html()</code> 方法分别获取节点的文本和原始HTML文本。无参数调用是获取文本/HTML，传入参数就变成设置文本/HTML。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).text(); <span class="comment">// 'Java &amp; JavaScript'</span></span><br/><span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).html(); <span class="comment">// 'Java &amp;amp; JavaScript'</span></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">var</span> j1 = $(<span class="string">'#test-ul li.js'</span>);</span><br/><span class="line">j1.html(<span class="string">'&lt;span style="color: red"&gt;JavaScript&lt;/span&gt;'</span>); <span class="comment">// 第一行被设置成红色的 JavaScript</span></span><br/><span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).text(<span class="string">'书'</span>); <span class="comment">// 第二行被设置成 "书"</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。如果作用在一个空的 jQuery 节点上，也不会报错&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="string">'#test-ul li'</span>).text(<span class="string">'JS'</span>); <span class="comment">// 两个节点都变成了JS</span></span><br/><span class="line">$(<span class="string">'#not-exist'</span>).text(<span class="string">'Hello'</span>); <span class="comment">// 不会报错，没有节点被设置成 'Hello'</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="CSS"&gt;<a href="#CSS" class="headerlink" title="CSS"></a>CSS&lt;/h4&gt;&lt;p&gt;和 HTML 类似，对 jQuery 对象下的 <code>css(&#39;name&#39;)</code> 读取 CSS 属性， <code>css(&#39;name&#39;, &#39;value&#39;)</code> 方法设置 CSS 属性&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>);</span><br/><span class="line">div.css(<span class="string">'color'</span>); <span class="comment">// '#000033', 获取CSS属性</span></span><br/><span class="line">div.css(<span class="string">'color'</span>, <span class="string">'#336699'</span>); <span class="comment">// 设置CSS属性</span></span><br/><span class="line">div.css(<span class="string">'color'</span>, <span class="string">''</span>); <span class="comment">// 清除CSS属性</span></span><br/><span class="line">div.css(<span class="string">'background-color'</span>, <span class="string">'#ffd351'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>); <span class="comment">// 连续设置两个 CSS 属性</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Modifying-DOM-Structure"&gt;<a href="#Modifying-DOM-Structure" class="headerlink" title="Modifying DOM Structure"></a>Modifying DOM Structure&lt;/h3&gt;&lt;p&gt;对于如下HTML片段，&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-div"</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Swift<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br/><span class="line"></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="添加-DOM"&gt;<a href="#添加-DOM" class="headerlink" title="添加 DOM"></a>添加 DOM&lt;/h4&gt;&lt;p&gt;首先要拿到<code>&lt;ul&gt;</code>节点：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> ul = $(<span class="string">'#test-div&gt;ul'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;然后，调用<code>append()</code>传入HTML片段。<code>append()</code>把DOM添加到最后，<code>prepend()</code>则把DOM添加到最前。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ul.append(<span class="string">'&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;除了接受字符串，<code>append()</code>还可以传入原始的DOM对象或jQuery对象&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">// 创建DOM对象:</span></span><br/><span class="line"><span class="keyword">var</span> ps = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br/><span class="line">ps.innerHTML = <span class="string">'&lt;span&gt;Pascal&lt;/span&gt;'</span>;</span><br/><span class="line"><span class="comment">// 添加DOM对象:</span></span><br/><span class="line">ul.append(ps);</span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 添加jQuery对象:</span></span><br/><span class="line">ul.append($(<span class="string">'#scheme'</span>));</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;同级节点可以用<code>after()</code>或者<code>before()</code>方法。即如果要把新节点插入到指定位置，例如，JavaScript和Python之间，那么，可以先定位到JavaScript，然后用<code>after()</code>方法：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> js = $(<span class="string">'#test-div&gt;ul&gt;li:first-child'</span>);</span><br/><span class="line">js.after(<span class="string">'&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;'</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="删除-DOM"&gt;<a href="#删除-DOM" class="headerlink" title="删除 DOM"></a>删除 DOM&lt;/h4&gt;&lt;p&gt;要删除DOM节点，拿到jQuery对象后直接调用<code>remove()</code>方法就可以了。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> li = $(<span class="string">'#test-div&gt;ul&gt;li'</span>);</span><br/><span class="line">li.remove(); <span class="comment">// 所有&lt;li&gt;全被删除</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Event"&gt;<a href="#Event" class="headerlink" title="Event"></a>Event&lt;/h3&gt;&lt;p&gt;假设要在用户点击了超链接时弹出提示框，我们用jQuery这样绑定一个<code>click</code>事件：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">/* HTML:</span></span><br/><span class="line"><span class="comment"> *</span></span><br/><span class="line"><span class="comment"> * &lt;a id="test-link" href="#0"&gt;点我试试&lt;/a&gt;</span></span><br/><span class="line"><span class="comment"> *</span></span><br/><span class="line"><span class="comment"> */</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 获取超链接的jQuery对象:</span></span><br/><span class="line"><span class="keyword">var</span> a = $(<span class="string">'#test-link'</span>);</span><br/><span class="line">a.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> alert(<span class="string">'Hello!'</span>);</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;<code>on</code>方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。&lt;/p&gt;&lt;p&gt;另一种更简化的写法是直接调用<code>click()</code>方法：两者完全等价。我们通常用这种写法。&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">a.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> alert(<span class="string">'Hello!'</span>);</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="事件类型"&gt;<a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型&lt;/h4&gt;&lt;h5 id="鼠标事件"&gt;<a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;click: 鼠标单击时触发；&lt;/li&gt;&lt;li&gt;dblclick：鼠标双击时触发；&lt;/li&gt;&lt;li&gt;mouseenter：鼠标进入时触发；&lt;/li&gt;&lt;li&gt;mouseleave：鼠标移出时触发；&lt;/li&gt;&lt;li&gt;mousemove：鼠标在DOM内部移动时触发；&lt;/li&gt;&lt;li&gt;hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。&lt;/li&gt;&lt;/ul&gt;&lt;h5 id="键盘事件"&gt;<a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件&lt;/h5&gt;&lt;p&gt;键盘事件仅作用在当前焦点的DOM上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keydown：键盘按下时触发；&lt;/li&gt;&lt;li&gt;keyup：键盘松开时触发；&lt;/li&gt;&lt;li&gt;keypress：按一次键后触发。&lt;/li&gt;&lt;/ul&gt;&lt;h5 id="其他事件"&gt;<a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;focus：当DOM获得焦点时触发；&lt;/li&gt;&lt;li&gt;blur：当DOM失去焦点时触发；&lt;/li&gt;&lt;li&gt;change：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；&lt;/li&gt;&lt;li&gt;submit：当<code>&lt;form&gt;</code>提交时触发；&lt;/li&gt;&lt;li&gt;ready：当页面被载入并且DOM树完成初始化后触发。&lt;/li&gt;&lt;/ul&gt;&lt;h4 id="ready"&gt;<a href="#ready" class="headerlink" title="ready"></a><code>ready</code>&lt;/h4&gt;&lt;p&gt;其中，<code>ready</code>仅作用于<code>document</code>对象。由于<code>ready</code>事件在DOM完成初始化后触发，且只触发一次，所以非常适合用来写其他的初始化代码。假设我们想给一个<code>&lt;form&gt;</code>表单绑定<code>submit</code>事件，下面的代码没有预期的效果：&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br/><span class="line"><span class="javascript"> <span class="comment">// 代码有误:</span></span></span><br/><span class="line"><span class="javascript"> $(<span class="string">'#testForm'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br/><span class="line"><span class="javascript"> alert(<span class="string">'submit!'</span>);</span></span><br/><span class="line"><span class="javascript"> });</span></span><br/><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"testForm"</span>&gt;</span></span><br/><span class="line"> …</span><br/><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;因为JavaScript在此执行的时候，<code>&lt;form&gt;</code>尚未载入浏览器，所以<code>$(&#39;#testForm)</code>返回<code>[]</code>，并没有绑定事件到任何DOM上。所以我们自己的初始化代码必须放到<code>document</code>对象的<code>ready</code>事件中，保证DOM已完成初始化。这样写就没有问题了。因为相关代码会在DOM树初始化后再执行。&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br/><span class="line"> $(document).on('ready', function () {</span><br/><span class="line"> $('#testForm).on('submit', function () {</span><br/><span class="line"> alert('submit!');</span><br/><span class="line"> });</span><br/><span class="line"> });</span><br/><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br/><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"testForm"</span>&gt;</span></span><br/><span class="line"> …</span><br/><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br/><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;由于<code>ready</code>事件使用非常普遍，所以可以这样简化：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="comment">// on('submit', function)也可以简化:</span></span><br/><span class="line"> $(<span class="string">'#testForm).submit(function () {</span></span><br/><span class="line"><span class="string"> alert('</span>submit!<span class="string">');</span></span><br/><span class="line"><span class="string"> });</span></span><br/><span class="line"><span class="string">});</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;甚至还可以再简化为：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="comment">// init…</span></span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;上面的这种写法最为常见。如果你遇到<code>$(function () &#123;...&#125;)</code>的形式，牢记这是<code>document</code>对象的<code>ready</code>事件处理函数。&lt;/p&gt;&lt;p&gt;完全可以反复绑定事件处理函数，它们会依次执行：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="built_in">console</span>.log(<span class="string">'init A…'</span>);</span><br/><span class="line">});</span><br/><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="built_in">console</span>.log(<span class="string">'init B…'</span>);</span><br/><span class="line">});</span><br/><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="built_in">console</span>.log(<span class="string">'init C…'</span>);</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="事件参数"&gt;<a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数&lt;/h4&gt;&lt;p&gt;有些事件，如<code>mousemove</code>和<code>keypress</code>，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入<code>Event</code>对象作为参数，可以从<code>Event</code>对象上获取到更多的信息：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> $(<span class="string">'#testMouseMoveDiv'</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br/><span class="line"> $(<span class="string">'#testMouseMoveSpan'</span>).text(<span class="string">'pageX = '</span> + e.pageX + <span class="string">', pageY = '</span> + e.pageY);</span><br/><span class="line"> });</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h4 id="取消绑定"&gt;<a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定&lt;/h4&gt;&lt;p&gt;一个已被绑定的事件可以解除绑定，通过<code>off(&#39;click&#39;, function)</code>实现：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>{</span><br/><span class="line"> alert(<span class="string">'hello!'</span>);</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line">a.click(hello); <span class="comment">// 绑定事件</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 10秒钟后解除绑定:</span></span><br/><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> a.off(<span class="string">'click'</span>, hello);</span><br/><span class="line">}, <span class="number">10000</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;需要特别注意的是，下面这种写法是无效的：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">// 绑定事件:</span></span><br/><span class="line">a.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> alert(<span class="string">'hello!'</span>);</span><br/><span class="line">});</span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 解除绑定:</span></span><br/><span class="line">a.off(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> alert(<span class="string">'hello!'</span>);</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;这是因为两个匿名函数虽然长得一模一样，但是它们是两个<em>不同</em>的函数对象，<code>off(&#39;click&#39;, function () &#123;...&#125;)</code>无法移除已绑定的第一个匿名函数。&lt;/p&gt;&lt;p&gt;为了实现移除效果，可以使用<code>off(&#39;click&#39;)</code>一次性移除已绑定的<code>click</code>事件的所有处理函数。&lt;/p&gt;&lt;p&gt;同理，无参数调用<code>off()</code>一次性移除已绑定的所有类型的事件处理函数。&lt;/p&gt;&lt;h4 id="事件触发条件"&gt;<a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件&lt;/h4&gt;&lt;p&gt;一个需要注意的问题是，事件的触发总是由用户操作引发的。例如，我们监控文本框的内容改动：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> input = $(<span class="string">'#test-input'</span>);</span><br/><span class="line">input.change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br/><span class="line"> <span class="built_in">console</span>.log(<span class="string">'changed…'</span>);</span><br/><span class="line">});</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;当用户在文本框中输入时，就会触发<code>change</code>事件。但是，如果用JavaScript代码去改动文本框的值，将<em>不会</em>触发<code>change</code>事件：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> input = $(<span class="string">'#test-input'</span>);</span><br/><span class="line">input.val(<span class="string">'change it!'</span>); <span class="comment">// 无法触发change事件</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;有些时候，我们希望用代码触发<code>change</code>事件，可以直接调用无参数的<code>change()</code>方法来触发该事件：&lt;/p&gt;<figure class="highlight javascript">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">var</span> input = $(<span class="string">'#test-input'</span>);</span><br/><span class="line">input.val(<span class="string">'change it!'</span>);</span><br/><span class="line">input.change(); <span class="comment">// 触发change事件</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;<code>input.change()</code>相当于<code>input.trigger(&#39;change&#39;)</code>，它是<code>trigger()</code>方法的简写。&lt;/p&gt;&lt;p&gt;为什么我们希望手动触发一个事件呢？如果不这么做，很多时候，我们就得写两份一模一样的代码。&lt;/p&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I hate web programming, but looks like I really have to learn it. Notes from Liao Xuefeng’s JS course]]></summary></entry><entry><title type="html">博客SEO优化</title><link href="https://yao-lirong.github.io/2022/04/22/seo.html" rel="alternate" type="text/html" title="博客SEO优化"/><published>2022-04-22T16:00:00+00:00</published><updated>2022-04-22T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2022/04/22/seo</id><content type="html" xml:base="https://yao-lirong.github.io/2022/04/22/seo.html"><![CDATA[<p>谷歌和我网站有仇吗，弄了好几天，怎么别人等一天就行了，我等一个礼拜也搞不定。换了域名以后还不如原来，原来谷歌自动就给我 index 了。这样想还是要感谢营销号和爬虫，爬了我一个我自己都看不下去的题解，竟然让我原来的博客被收录了，可惜这个新的弄起来就麻烦了…</p> <p><span id="more"></span>&lt;h2 id="验证所有权"&gt;<a href="#验证所有权" class="headerlink" title="验证所有权"></a>验证所有权&lt;/h2&gt;&lt;p&gt;首先我们需要验证网站所有权，选用 HTML tag 方式&lt;/p&gt;&lt;p&gt;在 Hexo - Archer 主题下找到 <code>layout - _partial - base-head.ejs</code> 中在 <code>&lt;head&gt;</code> tag 下添加需要的验证 tag&lt;/p&gt;&lt;p&gt;对于不同的主题，一个快速找到 <code>&lt;head&gt;</code> 在哪里生成的方法就是直接查找 <code>&lt;head&gt;</code> tag&lt;/p&gt;&lt;h2 id="本地插件生成必要文件"&gt;<a href="#本地插件生成必要文件" class="headerlink" title="本地插件生成必要文件"></a>本地插件生成必要文件&lt;/h2&gt;&lt;p&gt;使用 <code>npm install &lt;name&gt; --save</code> 安装以下几个插件: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;<code>hexo-generator-robotstxt</code>&lt;/li&gt;&lt;li&gt;<code>hexo-generator-sitemap</code>&lt;/li&gt;&lt;li&gt;<code>hexo-generator-baidu-sitemap</code>&lt;/li&gt;&lt;li&gt;<code>hexo-autonofollow</code>&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add the following plugin’s settings to root directory <code>_config.yml</code>:&lt;/p&gt;<figure class="highlight yaml">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="attr">sitemap:</span></span><br/><span class="line"> <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br/><span class="line"><span class="attr">baidusitemap:</span></span><br/><span class="line"> <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br/><span class="line"></span><br/><span class="line"><span class="attr">robotstxt:</span></span><br/><span class="line"> <span class="attr">useragent:</span> <span class="string">"*"</span></span><br/><span class="line"> <span class="attr">disallow:</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/assets/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/css/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/avatar/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/scripts/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/font/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/lib/</span></span><br/><span class="line"> <span class="attr">allow:</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/archives/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/categories/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/tags/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/about/</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">/page/</span> </span><br/><span class="line"> <span class="attr">sitemap:</span> </span><br/><span class="line"> <span class="bullet">-</span> <span class="string">https://yao-lirong.github.io/sitemap.xml</span></span><br/><span class="line"> <span class="bullet">-</span> <span class="string">https://yao-lirong.github.io/baidusitemap.xml</span></span><br/><span class="line"></span><br/><span class="line"><span class="attr">nofollow:</span></span><br/><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Google"&gt;<a href="#Google" class="headerlink" title="Google"></a>Google&lt;/h2&gt;&lt;p&gt;有些时候如果不进行这些所谓『优化』，你只能等有人链接到你的页面谷歌才会收录，所以这些优化实际上是必要的。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Canonical Tag 优化: 和前文一样，找到在 <code>&lt;head&gt;</code> tag 中对应位置，添加以下代码&lt;/p&gt;<figure class="highlight html">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">&lt;% </span><br/><span class="line"> var base_url = config.url;</span><br/><span class="line"> if (config.url.charAt(config.url.length - 1) !== '/') base_url += '/';</span><br/><span class="line"> var canonical_url = base_url + page.canonical_path.replace('index.html', '');</span><br/><span class="line">%&gt;</span><br/><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"&lt;%= canonical_url %&gt;"</span>&gt;</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap#addsitemap">提交 sitemap.xml</a>: 首先从 <a href="https://search.google.com/search-console/sitemaps">Search Console</a> 中提交，在通过 <a href="https://www.google.com/ping?sitemap=https://yao-lirong.github.io/sitemap.xml">ping</a> 提交上双保险&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt#submit">提交 robots.txt</a>: 从<a href="https://www.google.com/webmasters/tools/robots-testing-tool">这里</a>可以提交并看到谷歌最新抓取到的 <code>robots.txt</code>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提交了这些东西以后需要等好久，这时为了确认我们网站啥的确实没问题，心理求个安慰，使用 URL Inspection in Search Console, or directly at this link <code>https://search.google.com/search-console/inspect?resource_id=&lt;url you want to check rn&gt;</code>. &lt;/p&gt;&lt;p&gt;如果显示”URL is not on Google”，选择 “TEST LIVE URL”, 只要我们看到 “URL is available to Google” 以及 “User-declared canonical” 这一栏确实是本文网址一般就没问题。&lt;/p&gt;&lt;p&gt;此时，为了加快 index 进程，我们可以 “Request Indexing” 虽然只有这一个 page，但芝麻肉也是肉…&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="Google-Sitemap-的问题"&gt;<a href="#Google-Sitemap-的问题" class="headerlink" title="Google Sitemap 的问题"></a>Google Sitemap 的问题&lt;/h2&gt;&lt;p&gt;上面用了 URL inspection tool 全是因为老显示我 sitemap couldn’t fetch. 查询了一下能做的只有等待… &lt;/p&gt;&lt;p&gt;<a href="https://support.google.com/webmasters/thread/3864297/trying-to-submit-sitemap-and-it-says-couldn-t-fetch">谷歌工作人员的回复</a>, <a href="https://betterstudio.com/blog/search-console-fails-to-fetch-sitemap/">一个描述问题比较全的网站</a>&lt;/p&gt;&lt;h2 id="Reference"&gt;<a href="#Reference" class="headerlink" title="Reference"></a>Reference&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;<a href="https://summerandwinter.github.io/hexo-optimize-seo.html">Hexo搜索引擎优化</a>: 大部分有用的 Google SEO 优化步骤都来自这里&lt;/li&gt;&lt;li&gt;<a href="https://ahrefs.com/blog/google-index/">Get Google to Index Your Site</a>: 以及国外的一个比较全的 Google 排雷网站&lt;/li&gt;&lt;/ol&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[谷歌和我网站有仇吗，弄了好几天，怎么别人等一天就行了，我等一个礼拜也搞不定。换了域名以后还不如原来，原来谷歌自动就给我 index 了。这样想还是要感谢营销号和爬虫，爬了我一个我自己都看不下去的题解，竟然让我原来的博客被收录了，可惜这个新的弄起来就麻烦了…]]></summary></entry><entry><title type="html">Video Editing (FFmpeg DaVinci)</title><link href="https://yao-lirong.github.io/2022/04/08/video-editing-ffmpeg-davinci.html" rel="alternate" type="text/html" title="Video Editing (FFmpeg DaVinci)"/><published>2022-04-08T16:00:00+00:00</published><updated>2022-04-08T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2022/04/08/video-editing-ffmpeg-davinci</id><content type="html" xml:base="https://yao-lirong.github.io/2022/04/08/video-editing-ffmpeg-davinci.html"><![CDATA[<p>主要记录视频的一些相关知识以及 FFmpeg 和 DaVinci 的常见用法</p> <p><span id="more"></span>&lt;h2 id="FFmpeg-Video"&gt;<a href="#FFmpeg-Video" class="headerlink" title="FFmpeg - Video"></a>FFmpeg - Video&lt;/h2&gt;&lt;h3 id="File-Format-Conversion"&gt;<a href="#File-Format-Conversion" class="headerlink" title="File Format Conversion"></a>File Format Conversion&lt;/h3&gt;&lt;p&gt;For most simple tasks, you can just do &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input.avi output.mp4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;and <code>ffmpeg</code> will figure out how to perform that conversion. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.cnblogs.com/zmj97/p/10180702.html">FFmpeg 合并文件</a>:&lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> *.flv; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"file '<span class="variable">$f</span>'"</span> &gt;&gt; mylist.txt; <span class="keyword">done</span></span><br/><span class="line">ffmpeg -f concat -i mylist.txt -c copy output.flv</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;更详细的官方文档在<a href="https://trac.ffmpeg.org/wiki/Concatenate">这里</a>。具体地来看，我们这里用的是 concat demuxer, 这项协议支持不同的容器格式，甚至是本身不支持 concat 操作的容器格式的合并 &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i <span class="string">"concat:input1|input2"</span> -codec copy output.mkv</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;对于 ts 之类本身支持 file-level concat 的文件格式，可以直接使用如上的 concat protocol (参考 <a href="https://stackoverflow.com/a/11175851/">stackoverflow 答案1</a>, <a href="https://stackoverflow.com/questions/14829819/how-to-concatenate-flv-file-into-one/14839514#14839514">答案2</a>)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://askubuntu.com/a/716457">FFmpeg 转换格式</a>:&lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment"># stream copy all streams</span></span><br/><span class="line">ffmpeg -i input -map 0 -c copy output.mp4 </span><br/><span class="line"></span><br/><span class="line"><span class="comment"># re-encode the video to H.264 and stream copy the audio</span></span><br/><span class="line">ffmpeg -i input.ts -c:v libx264 -c:a copy output.mp4 </span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://stackoverflow.com/q/39861885/">FFmpeg 批处理转换格式</a>:&lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="meta">#!/bin/bash</span></span><br/><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.avi;</span><br/><span class="line"><span class="keyword">do</span> </span><br/><span class="line"> ffmpeg -i <span class="string">"<span class="variable">$i</span>"</span> -c:v libx265 -c:a copy X265_<span class="string">"<span class="variable">$i</span>"</span></span><br/><span class="line"><span class="keyword">done</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Editing-Clipping-Encoding"&gt;<a href="#Editing-Clipping-Encoding" class="headerlink" title="Editing, Clipping, Encoding"></a>Editing, Clipping, Encoding&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://stackoverflow.com/a/27413824/12006199">Extract Audio from Video</a>: where <code>-vn</code> disables video processing &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input.mp4 -vn -acodec copy output-audio.aac <span class="comment"># extract aac</span></span><br/><span class="line">ffmpeg -i input.mp4 -vn -acodec copy output-audio.opus <span class="comment"># extract opus</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.cnblogs.com/renhui/p/9209664.html">FFmpeg查看媒体信息</a>: 使用 <code>ffprobe</code>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://superuser.com/a/927507/">Extract Subtitles</a>: On <a href="https://stackoverflow.com/a/72415890/">hdmv_pgs_subtitle</a>, where we need sup format. &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i video.mkv -map 0:s:0 -c copy subs.sup</span><br/><span class="line">ffmpeg -i Movie.mkv -map 0:s:0 -c copy subs.srt</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://trac.ffmpeg.org/wiki/Encode/H.265">FFmpeg H.265 Reencode</a>: if you use all the settings as default, just do:&lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input -c:v libx265 -c:a copy output.mp4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video">Clip Video</a>: you should primarily read <a href="https://trac.ffmpeg.org/wiki/Seeking">this wiki page</a>, which introduces you to seeking in ffmpeg. In short, you should use <code>-ss</code> before <code>-i</code> in most cases. &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment"># -ss used before -i: parse input using keyframes, which is very fast</span></span><br/><span class="line"><span class="comment"># gives exactly the same output</span></span><br/><span class="line">ffmpeg -ss 00:40:30 -i 20170301.mp4 -t 310 -c copy 1.mp4 </span><br/><span class="line">ffmpeg -ss 00:40:30 -to 00:45:40 -i 20170301.mp4 -c copy 2.mp4</span><br/><span class="line"></span><br/><span class="line"><span class="comment"># -ss used after -i: decodes but discards input until the timestamps reach position. </span></span><br/><span class="line"><span class="comment"># which is done very slowly, frame by frame</span></span><br/><span class="line">ffmpeg -i 20170301.mp4 -ss 00:40:30 -to 00:45:40 -c copy 3.mp4</span><br/><span class="line"></span><br/><span class="line"><span class="comment"># Doesn't work, will output something at most 45:40 long</span></span><br/><span class="line">ffmpeg -ss 00:40:30 -i 20170301.mp4 -to 00:45:40 -c copy 4.mp4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Broken-File-Fix"&gt;<a href="#Broken-File-Fix" class="headerlink" title="Broken File Fix"></a>Broken File Fix&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://stackoverflow.com/a/52847587/12006199">Fill Missing Time Stamps with Empty Audio</a>: &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input -af aresample=async=1 output.wav</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.reddit.com/r/ffmpeg/comments/nf960l/fill_missing_video_frames/gyseli3/">Fill Missing Frames (Change Variable Frame to Constant Frame)</a>:&lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input -vf <span class="string">"fps=30"</span> output.mp4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://stackoverflow.com/a/12375018/">Create a Silent Audio Track</a> &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -i video.mov -c:v copy -c:a aac -shortest output.mov</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="Others"&gt;<a href="#Others" class="headerlink" title="Others"></a>Others&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;ffmpeg <a href="https://stackoverflow.com/a/53308111/12006199">download m3u8 file</a> with <a href="https://stackoverflow.com/a/59657204/12006199">custome user-agent</a>: If flag <code>-user_agent</code> is not working, you can use <code>-headers</code>, referenced <a href="https://stackoverflow.com/a/41709762/12006199">here</a> &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -user_agent <span class="string">"SNH48 ENGINE"</span> -i <span class="string">"https://xxx.m3u8"</span> -codec copy file.mp4</span><br/><span class="line">ffmpeg -headers <span class="string">'User-Agent: Mozilla'</span> -i <span class="string">"https://xxx.m3u8"</span> -codec copy file.mp4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;<a href="https://superuser.com/questions/1041816/combine-one-image-one-audio-file-to-make-one-video-using-ffmpeg">https://superuser.com/questions/1041816/combine-one-image-one-audio-file-to-make-one-video-using-ffmpeg</a>&lt;/p&gt;&lt;h2 id="FFmpeg-Audio"&gt;<a href="#FFmpeg-Audio" class="headerlink" title="FFmpeg - Audio"></a>FFmpeg - Audio&lt;/h2&gt;&lt;p&gt;！！！整理！！！&lt;/p&gt;&lt;p&gt;<a href="https://stackoverflow.com/questions/46508055/using-ffmpeg-to-cut-audio-from-to-position">https://stackoverflow.com/questions/46508055/using-ffmpeg-to-cut-audio-from-to-position</a>&lt;/p&gt;&lt;p&gt;<a href="https://stackoverflow.com/questions/71158575/output-file-is-empty-nothing-was-encoded-check-ss-t-frames-parameters-i">https://stackoverflow.com/questions/71158575/output-file-is-empty-nothing-was-encoded-check-ss-t-frames-parameters-i</a>&lt;/p&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -ss 60 -i presentation.aac -t 240 -c copy presentation_song.aac 好用</span><br/><span class="line"></span><br/><span class="line">ffmpeg -ss 60 -t 240 -i presentation.aac -c copy presentation_song.aac 不好用</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;ul&gt;&lt;li&gt;&lt;p&gt;convert file format to <code>.ogg</code> with specififed sample rate: here we specified sample rate to be 44.1K &lt;/p&gt;<figure class="highlight bash">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -i input.wav -c:a libvorbis -ar 44100 output.ogg</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;/ul&gt;<figure class="highlight plaintext">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ffmpeg -framerate 30 -i z_Blue1<em>1_60</em>%d.png -c:v libx264 -r 30 output.mp4</span><br/><span class="line"></span><br/><span class="line">for color in "Blue" "Red" "Green" "Yellow"; do for ((i=1; i&lt;=3; i++)); do printf "%s%d_1_60.png\n" "$color" "$i"; done; done</span><br/><span class="line"></span><br/><span class="line">ffmpeg -framerate 15 -i z_Blue1<em>1_60.png</em>%d.png -c:v libx264 -r 15 output.mp4</span><br/><span class="line"></span><br/><span class="line">记得看 aphelion-defense/assets/textures/60/test.sh</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="DaVinci"&gt;<a href="#DaVinci" class="headerlink" title="DaVinci"></a>DaVinci&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://www.youtube.com/watch?v=8lj7i-CvqTs">Import and Bake Subtitles in DaVinci</a> &lt;/li&gt;&lt;li&gt;<a href="https://www.youtube.com/watch?v=MiAPANZCopQ">Zoom In and Zoom Out in DaVinci</a>: achieve with key frames&lt;/li&gt;&lt;li&gt;<a href="https://www.youtube.com/watch?v=tzvNlGXXX5c">How to Fade in and Out Video</a> &lt;/li&gt;&lt;li&gt;<a href="https://www.youtube.com/watch?v=bQH8Z1WLA_w">Vertical timeline (Tiktok style)</a>&lt;/li&gt;&lt;li&gt;<a href="https://www.youtube.com/watch?v=E8Q2MhGw3wk">How to Control Audio Volume Levels</a>&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="编码解码格式"&gt;<a href="#编码解码格式" class="headerlink" title="编码解码格式"></a>编码解码格式&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;用 IDM 下载 YouTube 上视频会有两种格式 mkv 和 mp4 两种格式，结论：mkv 格式更优&lt;/p&gt;&lt;p&gt;都下载下来后使用 PotPlayer 播放时查看发现 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;mkv 格式需要使用 FFmpeg libdav1d decoder&lt;/li&gt;&lt;li&gt;mp4 格式需要使用 FFmpeg h264 decoder &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用 ffprobe 发现&lt;/p&gt;&lt;ul&gt;&lt;li&gt;mkv 格式使用 av1 格式编码&lt;/li&gt;&lt;li&gt;mp4 格式使用 h264 格式编码&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;查询<a href="https://www.cnblogs.com/eguid/p/16015446.html">资料</a>得知 av1 是谷歌新发布的编解码规范，相比 h265 压缩优势都很大，就不用说 h264 了。IDM 官方也推荐使用 av1 编码的 mkv 格式。（官方FAQ: <a href="https://www.internetdownloadmanager.com/register/new_faq/bi28.html">Can I download MP4 instead of MKV or what should I do to play MKV videos correctly?</a> | <a href="https://www.internetdownloadmanager.com/register/new_faq/video15.html">I cannot play downloaded MKV video. What should I do?</a>）&lt;/p&gt;&lt;p&gt;One caveat: Google seems to be using vp9 as the encoder of live stream, but this is still better than h264 in mp4. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于 SNH48 公演录播源，发现官网源使用 h264 ts 编码，YouTube 源大概是单独推流，谷歌编码为 vp9，且 YouTube 源有 1080P，官网只有720P。故优先选择 YouTube 源 （但是后来发现 YouTube 源好像音频是 opus 格式，Davinci 识别不了，最后用的还是别人的 bilibili 源）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[主要记录视频的一些相关知识以及 FFmpeg 和 DaVinci 的常见用法]]></summary></entry><entry><title type="html">2021 Web Journal</title><link href="https://yao-lirong.github.io/2021/12/30/2021-web-journal.html" rel="alternate" type="text/html" title="2021 Web Journal"/><published>2021-12-30T16:00:00+00:00</published><updated>2021-12-30T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2021/12/30/2021-web-journal</id><content type="html" xml:base="https://yao-lirong.github.io/2021/12/30/2021-web-journal.html"><![CDATA[<p>开始学习阮一峰记录自己看到的有意思的文章和收集有用的工具的第一个整年</p> <p><a href="https://www.nature.com/immersive/d41586-021-03521-3/index.html">The best science images of 2021</a></p> <p><span id="more"></span>&lt;h2 id="工具的使用"&gt;<a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://blog.csdn.net/Silvester123/article/details/88253990">VScode根据不同语言设置不同tab代表的空格个数</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://zhidao.baidu.com/question/282964967.html">在LINUX系统下使用SSH登陆上路由器</a>: 注意可以使用flagfox看一眼路由器的IP address到底是什么，username就是登陆路由器使用的用户名，如果两个都填写正确是不会出现 “port XX refused connection”这种情况的&lt;/p&gt;&lt;p&gt;（记得开 merlin 的 ssh 许可：Administration - System - Enable SSH）&lt;/p&gt;<figure class="highlight shell">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">ssh &lt;username&gt;@&lt;IP_address&gt;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://blog.csdn.net/qq_25965165/article/details/108209622">批量合成bilibili的m4s缓存文件为MP4格式</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://blog.csdn.net/guanking19/article/details/111657559">禁用Windows Terminal多行粘贴的警告</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.sysgeek.cn/apt-vs-apt-get/">apt vs apt-get</a>: 简单来说，<code>apt</code>是更新的集合版的 <code>apt-get</code>，应该尽量使用 <code>apt</code>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://kagakucafe.com/2020092311700.html">为日文文档添加振り仮名的word宏</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CodeBlocks 运行问题解决: <a href="https://stackoverflow.com/questions/7655471/ld-exe-cannot-open-output-file-permission-denied/51000204#51000204">ld.exe: cannot open output file … : Permission denied</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://stackoverflow.com/a/28233711/12006199">Convert HTML back to Markdown with Pandoc</a>: <code>pandoc -f html --wrap=none -t markdown -o test.md &lt;filename&gt;</code>. Experiment with <code>--wrap=none/preserve/auto</code> to choose the best.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="http://demo.showdownjs.com/">showdownjs</a>: online two-way markdown and html converter&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GitHub 今年对于 Windows 变为强制需要 token，且只有 HTTPS 才能使用 Token&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Capture Group in Regex: When matching a pattern, use parenthesis <code>(some_pattern_you_try_to_match)</code> to define a capture group. (Two references: <a href="https://www.rexegg.com/regex-capture.html">succinct</a>, <a href="https://sodocumentation.net/regex/topic/660/capture-groups">more detailed</a>)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zotero 在论文对应原始网页直接使用浏览器插件获取的信息最全，如果没有对这么全面的信息的要求，可以在 Google Scholar 页面选择 Cite -&gt; Refman (Refman 比 Endnote 格式获取信息更多一些)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="涨技术知识"&gt;<a href="#涨技术知识" class="headerlink" title="涨技术知识"></a>涨技术知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://towardsdatascience.com/the-intuition-behind-shannons-entropy-e74820fe9800">The intuition behind Shannon’s Entropy</a>&lt;/li&gt;&lt;li&gt;<a href="https://blog.csdn.net/mycoolx/article/details/6648643">BT术语的解释</a>&lt;/li&gt;&lt;li&gt;<a href="https://www.ifanr.com/1374936">协议混乱的 USB-C</a>&lt;/li&gt;&lt;li&gt;<a href="https://linuxiac.com/how-to-use-ssh-tunneling/">What is SSH Port Forwarding and how does it work</a>: 图示写的特别好&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="混迹于互联网"&gt;<a href="#混迹于互联网" class="headerlink" title="混迹于互联网"></a>混迹于互联网&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;一线个人破解及整合 <a href="http://www.dayanzai.me/">大眼仔旭</a>, <a href="https://www.luochenzhimu.com/">落尘之木</a>, <a href="https://www.423down.com/">423down</a>, <a href="https://www.ghxi.com/">果壳剥壳</a> &lt;/p&gt;&lt;p&gt; 二线网赚搬运 <a href="https://www.nite07.com/">Nite07的小窝</a>, <a href="https://www.7xiazai.com/">小冰下载站</a>, <a href="foxirj.com">佛系软件</a>&lt;/p&gt;&lt;p&gt;<a href="https://weibo.com/vposy">Adobe 大神破解版 by vposy</a>, <a href="https://mydown.yesky.com/">天极下载 PC 软件历史版本</a>, &lt;/p&gt;&lt;p&gt;<a href="https://downloadapk.net/">apkdownload(比 apkpure 全)</a>, <a href="https://moddroid.co/">破解apk Moddroid</a>&lt;/p&gt;&lt;p&gt;<a href="https://downloadly.net/">伊朗PC软件破解</a>, from <a href="https://mp.weixin.qq.com/s?__biz=MzI2Mzk4MjM4Mg==&amp;mid=2247515652&amp;idx=2&amp;sn=34d9bf58af69d5c0459a1083f2f4b7bd&amp;chksm=eab16245ddc6eb530fe4f88021c310f477131fb042dda02980155984727a5e1066ef52d4e35d&amp;mpshare=1&amp;scene=23&amp;srcid=0502AnihDbxdraZHguAKhC24">胡萝卜周 网站推荐</a>&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="折腾"&gt;<a href="#折腾" class="headerlink" title="折腾"></a>折腾&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;<a href="https://tieba.baidu.com/p/7171344019">Pot+LAV+madVR配置教程</a>: 使用 <a href="https://shark007.net/tools.html">Icaros</a> 显示多种视频文件缩略图&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://docs.microsoft.com/en-US/windows/deployment/update/waas-wu-settings">禁用Win10自动更新</a>: configure automatic updates 板块&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://github.com/mozilla/policy-templates/blob/master/README.md#DisableAppUpdate">Disable Firefox Auto-Update</a>: Go to <code>about:policies</code> to check flags that could be set. Create a <code>policies.json</code>, create a directory called <code>distribution</code> where the EXE is located, and place the json file there on Windows.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.cnblogs.com/cstylex/p/Rime_on_Linux_Android_Mac_Windows_iOS_sync.html">在五种不同系统上部署Rime并同步</a>&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Web Annotation Tools:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;diigo: 超了最高容量了&lt;/li&gt;&lt;li&gt;weava: 正在用&lt;/li&gt;&lt;li&gt;beanote: 可以试试，记录保存在本地，无云端服务&lt;/li&gt;&lt;li&gt;additor, Hypothesis: 重点并不在自己的服务保存，而是在协作，想等他们一阵子看看发展效果，结果最近又用了一次还是不好用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="值得纪念的新闻"&gt;<a href="#值得纪念的新闻" class="headerlink" title="值得纪念的新闻"></a>值得纪念的新闻&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;优秀的付费新闻资讯：FT中文网，财新网，财经网，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;能处的日本新闻：<a href="https://www.nikkei.com/">日本经济新闻</a>, <a href="https://www.asahi.com/">朝日新闻</a>,&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;<a href="https://www.douban.com/note/587742851/">赞叹｜锤子手机未必最好，但他们的设计师都值得致敬</a> &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;blockquote&gt;&lt;p&gt;（现在的社会）不是为了人的发展，而是人为了这些东西而发展，反过来了。这些钢筋水泥，一些数据华丽的办公楼，一些冰冷的没有什么价值的东西，已经成为了人追求的全部了。&lt;/p&gt;&lt;p&gt;– <a href="https://cn.nytimes.com/china/20210714/lying-flat-in-china/">“躺平学大师”：一个好的社会是可上可下的</a>&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="末日时钟"&gt;<a href="#末日时钟" class="headerlink" title="末日时钟"></a>末日时钟&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;<a href="https://cn.nikkei.com/politicsaeconomy/politicsasociety/45846-2021-09-01-05-03-00.html">全球人口衰退期临近，经济方程式在变</a>, <a href="https://cn.nikkei.com/politicsaeconomy/politicsasociety/45852-2021-09-01-05-00-00.html">30万年历史上两次革命让人类繁荣，到了转折点？</a> 改变人口增长趋势的是女性的教育程度提高和加速进入社会导致生育率下降。1名女性一生生育的孩子数量（总和生育率）2017年为2.4，逼近人口无法增长的2.1。少子化是每个人的人生选择不断累积的结果，几乎没有一个国家能扭转局面。人口增长率在20世纪60年代后半期达到2.09％的峰值，现在已经下降到1％左右。&lt;/li&gt;&lt;li&gt;<a href="https://cn.nikkei.com/industry/ienvironment/46149-2021-09-29-05-01-00.html">脱碳之路存在能源供需断裂风险</a>: 无论以保存现状或推动减碳为前提，预测2050年石油天然气需求仍然高于现在。即便如此，欧美国际石油资本还是开始减少对油田和气田的投资。然而中东由于他国减产，正在逐步扩大产能。如果仅仅是中东增加投资，垄断度提高的话将给世界的政治和经济带来很大风险。&lt;/li&gt;&lt;/ul&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[开始学习阮一峰记录自己看到的有意思的文章和收集有用的工具的第一个整年 The best science images of 2021]]></summary></entry><entry><title type="html">Look Back on Cornell 21FA</title><link href="https://yao-lirong.github.io/2021/12/14/look-back-on-cornell-21fa.html" rel="alternate" type="text/html" title="Look Back on Cornell 21FA"/><published>2021-12-14T16:00:00+00:00</published><updated>2021-12-14T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2021/12/14/look-back-on-cornell-21fa</id><content type="html" xml:base="https://yao-lirong.github.io/2021/12/14/look-back-on-cornell-21fa.html"><![CDATA[<p>回来了，总体来说是挺努力的一学期</p> <p><span id="more"></span>&lt;h2 id="CS3410-Computer-System-Organization"&gt;<a href="#CS3410-Computer-System-Organization" class="headerlink" title="CS3410 Computer System Organization"></a>CS3410 Computer System Organization&lt;/h2&gt;&lt;p&gt;必修课，没啥好说的，上课之前暑假和在飞机上自己看了几章Code预习了一下，感觉是Code讲了的部分比Bracy讲的好多了。幸亏前期有Code，真不知道其他同学能不能弄懂前面逻辑门那一部分。只有两个 Prelim 没有 Final，所以我考完 Prelim 2 之后就摆烂了，上课跟听故事一样。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A1 A2：画逻辑电路图，其实大部分还好，但是最后连mux都要全程自己连实在太折磨了&lt;/li&gt;&lt;li&gt;A3：通过内存溢出改变运行程序让它打印一段文字，应该是最好玩的一个作业&lt;/li&gt;&lt;li&gt;A4 A5：模拟 RISCV interpreter 和 Cache 操作&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比画电路图还折磨一些的是本课的 quiz，可以无限次尝试但是每次尝试题目不一样而且有强制时间间隔。经常我是第一次就有9／10，结果最后那个题要么我自己不会做然后反复出现，要么又出了大部分的新题其中又有我不懂的，要么就是我明明全会结果手滑选错了，下一次就会随到前两种情况不会的题。反正就是我为了其中的一道题要把所有题过个7,8遍，但是过程中大部分的题我已经反复做反复填答案填了无数次，每次填它的答案顺序还不一样，还要仔细看好了防止手滑选错，折磨王之王中王。&lt;/p&gt;&lt;h2 id="CS4780-Intro-to-Machine-Learning"&gt;<a href="#CS4780-Intro-to-Machine-Learning" class="headerlink" title="CS4780 Intro to Machine Learning"></a>CS4780 Intro to Machine Learning&lt;/h2&gt;&lt;p&gt;我当年上我的一生之敌4710就是为了 21SP 能上 4780，但是那年 4780 是播片，所以拖到了我回来康奈尔的这一学期。大部分是经典的ML算法，Deep Learning 和 Neural Network 涉及比较少。Assignment 和 project 都很水，基本就是填空题（好吧不全是，前期 assignment 太变态导致后来直接把作业成绩改成 S/U 了；project 用的平台 vocareum 也是各种乱七八糟的问题一大堆）所以最终成绩大概全是靠考试来排的。上之前大家都吹 KW 讲得特别好，但我真觉得也就那样，可能是其他的几个老师讲得太烂了？或者这门课有很多别的专业的来学而他们的老师一般讲课水准不高？反正我觉得也就是CS院平均水平吧，比我上的课的老师平均水平还稍微低一点点。因为前面确实涉及太多数学，所以我几乎每次下课都会问两个老师问题，一开始都对我挺耐心的，后来AD还好，但KW我能明显感觉到不耐烦了（哦当然了可能是我日常敏感了），有次我去找他问个扩展问题他跟我说：你不太需要担心这个。唉，好吧，你说啥就是啥。&lt;/p&gt;&lt;p&gt;sxy 因为 prelim 考砸了所以 drop 了这节课，下班学期没她带上得比较累（ 但是学期末因为一波较大型的 COVID 爆发，本课的 Final 改成 optional 了，可给她悔死了。她下学期又上了一遍这门课，觉得 22SP 的老师比 KW 教得清楚多了，我 22FA 要上他的课，看看到底咋样。&lt;/p&gt;&lt;h2 id="CS6850-Structure-of-Information-Networks"&gt;<a href="#CS6850-Structure-of-Information-Networks" class="headerlink" title="CS6850 Structure of Information Networks"></a>CS6850 Structure of Information Networks&lt;/h2&gt;&lt;p&gt;Jon Kleingerg真的是神，人聪明课讲得还清晰。各种看上去很难的推导经他的课就连我也能听明白。每节课下课的时候我总会追着这个麦克阿瑟天才奖得主问些很傻逼的基础数学问题，每当这种时候我就会觉得我在康奈尔的学费全都花在了刀刃上。（不我其实是很对不起 Jon 用这种傻逼问题折磨他的）&lt;/p&gt;&lt;p&gt;这节课上下来我学到的统计知识比我在4710一个学期学的都要多，而且很多证明技巧都是 CS 或者说工科通用，非常实用。课上讲了很多有意思的图上理论，不过一学期下来其实我也就记着 small world property，和以我校唯一数学名师 Steven Strogatz 及其弟子命名的 Watts Strogatz Model。作业的比较简单 project 也很自由，就算只是为了学统计证明技巧也很值得上的一节课。&lt;/p&gt;&lt;p&gt;Project 做的是 <a href="https://book.douban.com/subject/3683922/">Complexity</a> 里面看到过的 Random Boolean Network，其实本来是想做一个 DNA Regulatory Network 模拟的，但是怎么都找不到数据，所以改做了 RBN，其实实验和我的猜想也根本对不上，到了后面基本就是摆烂了瞎写的。&lt;/p&gt;&lt;p&gt;因为这学期另外两个课确实压力有点大，前期是 3410 恶心人的电路图，后期是没有 sxy 的 4780，而且我还非常认真地给 4780 整理笔记，所以这节课到后半段的时候我会去上课，会去记笔记，但是笔记就不整理誊抄到另一个本子上了。结果就是后半部分让我再回忆指定就回忆不起来了。不过幸好这节课同步 NYC 直播所以有录播，把 lecture recording 下了下来。可能下辈子会去再看一遍吧…&lt;/p&gt;&lt;h2 id="Research"&gt;<a href="#Research" class="headerlink" title="Research"></a>Research&lt;/h2&gt;&lt;p&gt;学期初的时候我跟 Joe 谈话，跟他说我还是纠结要去做research还是找工作。他跟我说我都大三了现在还在纠结是不是有点太晚了… 我本来刚回康奈尔心情挺好的，又让这老东西给我干焦虑了。不过经过他的介绍找到了新来的教授 Kevin Ellis。去年春天我和本校 PhD Spencer 谈话的时候他就和我提起来过 Kevin，他做的东西确实是我一看就觉得很有意思。原来大一的时候我也找过康奈尔校内老师的研究项目但是总觉得都很无聊，Kevin 给我介绍的 <a href="https://github.com/fchollet/ARC">Abstraction and Reasoning Corpus</a> 确实让人觉得这个问题才是 AI 应该着手解决的问题。可能因为是新来老师的原因，非常幸运和他谈了以后他也高兴让我跟他一起做研究。ARC 里的 <code>log.md</code> 更加详细地记录了关于 research 我这一学期都干了什么。&lt;/p&gt;&lt;h2 id="PE1340-Juggling"&gt;<a href="#PE1340-Juggling" class="headerlink" title="PE1340 Juggling"></a>PE1340 Juggling&lt;/h2&gt;&lt;p&gt;神级减压课，没上过这课的人无法想象你用了几节课就学会了在空中扔三个球是多么有成就感的一节事，在康奈尔这个充满挫败感的B地方，它是我这个学期的唯一慰藉。不仅如此，你要是学得快的话还能学会扔棒子，转盘子，不过我都不会。唯一一个我会的扩展项目是空竹（我会的同学们也都会，这玩意确实好学）等回国去公园和老大爷斗技去。&lt;/p&gt;&lt;h2 id="PE1628-Unicycling"&gt;<a href="#PE1628-Unicycling" class="headerlink" title="PE1628 Unicycling"></a>PE1628 Unicycling&lt;/h2&gt;&lt;p&gt;小丑学期，既学扔球又学独轮车，全让我给丑完了。上面那节课是慰藉，这节课完全相反，我毫不客气地说这是我在康奈尔几年以来遭到的最沉重的自信心打击。一个学期上下来7节课21个小时，我还是不会骑这B玩意，别人都能骑着车跳了，我还搁墙角那扶着呢。我学习能力怎么样咱另说，这玩意隔得蛋是真疼。&lt;/p&gt;&lt;h2 id="NES2276-Sensational-Religion"&gt;<a href="#NES2276-Sensational-Religion" class="headerlink" title="NES2276 Sensational Religion"></a>NES2276 Sensational Religion&lt;/h2&gt;&lt;p&gt;为了别毕不了业做打算随便选的一门课，和众多文科课一样，它也是那么得扯。课上最扯的一个瞬间大概就是看这部名为<a href="https://movie.douban.com/subject/4707678/">塑料袋</a>的纪录片，看完之后课上同学一本正经地讨论是我觉得我降生以来离正常世界距离最远的时候。&lt;/p&gt;&lt;h2 id="Winter-Break"&gt;<a href="#Winter-Break" class="headerlink" title="Winter Break"></a>Winter Break&lt;/h2&gt;&lt;p&gt;最后浅谈一下假期。感恩节的时候偶然和gjt说上了话，gjt热情地邀请我去他们那。他是和cqc和大帅住一个宿舍，ls寒假也去了。这几个人真是电竞宿舍，成天打倒晚上一两点，起来就直接吃中午饭，写作业考试都找代写，反正就是 stereotypical 的中国来的在美留学生。寒假和他们去了几趟LA还去了一趟拉斯维加斯，去的时候他们几个开的一号公路我在后面直接给我晃吐了，biang的不就看个海吗，在哪不是看。死亡谷还是挺有看头的，还一起去维加斯看了看不好说的节目。&lt;/p&gt;&lt;p&gt;回来以后拿他们几个的顶配电脑9天连干70个通了2077，后面又通了生化危机2,3重置版，反正就是每天干到凌晨五点，然后中午起床，在国内的qsq都经常让我整蒙逼，毕竟CA 5点是国内八九点钟，他都快要睡了，直言我人生已经玩完了。我刚去的时候还笑他们，最后发现原来我才是网瘾最重的那个。跟他们出去的时候因为闲着没事就看书看小说，被他们调侃爱学习，回来以后他们几个都开学了我就成天占着电脑打游戏。我确实一直这样，主要出去的时候没电脑，我也不爱在外面刷手机，就会变成我每次出门都会看书的这种奇怪情况，不过只要有台好电脑我就原形毕露了。&lt;/p&gt;&lt;p&gt;非常感谢这几个人让我度过了来美国以后最快乐的一段时光，太过快乐导致我第一天回来竟然戒断性抑郁了（当天回来的飞机上有点缺氧也是主要原因）&lt;/p&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[回来了，总体来说是挺努力的一学期]]></summary></entry><entry><title type="html">SQL Manual</title><link href="https://yao-lirong.github.io/2021/09/15/sql-manual.html" rel="alternate" type="text/html" title="SQL Manual"/><published>2021-09-15T16:00:00+00:00</published><updated>2021-09-15T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2021/09/15/sql-manual</id><content type="html" xml:base="https://yao-lirong.github.io/2021/09/15/sql-manual.html"><![CDATA[<p>提交实习申请后发来个小测验，给我做崩溃了，第一个要我做这种级别的SQL，我最多也就会个 <code>select from where</code>，超纲过于严重，只能回头补习</p> <p><span id="more"></span>&lt;h2 id="Data-Type"&gt;<a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;INT&lt;/td&gt;&lt;td&gt;整型&lt;/td&gt;&lt;td&gt;4字节整数类型，范围约+/-21亿&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BIGINT&lt;/td&gt;&lt;td&gt;长整型&lt;/td&gt;&lt;td&gt;8字节整数类型，范围约+/-922亿亿&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REAL&lt;/td&gt;&lt;td&gt;浮点型&lt;/td&gt;&lt;td&gt;4字节浮点数，范围约+/-1038&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DOUBLE&lt;/td&gt;&lt;td&gt;浮点型&lt;/td&gt;&lt;td&gt;8字节浮点数，范围约+/-10308&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DECIMAL(M,N)&lt;/td&gt;&lt;td&gt;高精度小数&lt;/td&gt;&lt;td&gt;由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHAR(N)&lt;/td&gt;&lt;td&gt;定长字符串&lt;/td&gt;&lt;td&gt;存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VARCHAR(N)&lt;/td&gt;&lt;td&gt;变长字符串&lt;/td&gt;&lt;td&gt;存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BOOLEAN&lt;/td&gt;&lt;td&gt;布尔类型&lt;/td&gt;&lt;td&gt;存储True或者False&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DATE&lt;/td&gt;&lt;td&gt;日期类型&lt;/td&gt;&lt;td&gt;存储日期，例如，2018-06-22&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TIME&lt;/td&gt;&lt;td&gt;时间类型&lt;/td&gt;&lt;td&gt;存储时间，例如，12:20:59&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DATETIME&lt;/td&gt;&lt;td&gt;日期和时间类型&lt;/td&gt;&lt;td&gt;存储日期+时间，例如，2018-06-22 12:20:59&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id="Table-Constraints"&gt;<a href="#Table-Constraints" class="headerlink" title="Table Constraints"></a>Table Constraints&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Constraint&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;<code>PRIMARY KEY</code>&lt;/td&gt;&lt;td&gt;This means that the values in this column are unique, and each value can be used to identify a single row in this table.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<code>AUTOINCREMENT</code>&lt;/td&gt;&lt;td&gt;For integer values, this means that the value is automatically filled in and incremented with each row insertion. Not supported in all databases.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<code>UNIQUE</code>&lt;/td&gt;&lt;td&gt;This means that the values in this column have to be unique, so you can’t insert another row with the same value in this column as another row in the table. Differs from the <code>PRIMARY KEY</code> in that it doesn’t have to be a key for a row in the table.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<code>NOT NULL</code>&lt;/td&gt;&lt;td&gt;This means that the inserted value can not be <code>NULL</code>.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<code>CHECK (expression)</code>&lt;/td&gt;&lt;td&gt;This allows you to run a more complex expression to test whether the values inserted are valid. For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<code>FOREIGN KEY</code>&lt;/td&gt;&lt;td&gt;This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table. For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, the <code>FOREIGN KEY</code> can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id="Table-Structure"&gt;<a href="#Table-Structure" class="headerlink" title="Table Structure"></a>Table Structure&lt;/h2&gt;&lt;h3 id="Foreign-Key"&gt;<a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key&lt;/h3&gt;&lt;p&gt;A foreign key is a field (or collection of fields) in one table, that refers to the primary key in another table.&lt;/p&gt;&lt;p&gt;The foreign key constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students </span><br/><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id <span class="comment">– name the constraint</span></span><br/><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id) <span class="comment">– use class_id column in students as FK</span></span><br/><span class="line"><span class="keyword">REFERENCES</span> classes (id); <span class="comment">– links to id in table classes</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;Deleting the constraint won’t delete the column used as FK. &lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br/><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_class_id;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Indexing"&gt;<a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing&lt;/h3&gt;&lt;p&gt;We can index frequently accessed columns to speed up querying. Indexes are based on hash, so the more spread out the data in index columns are, the better indexing performs. 索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br/><span class="line"><span class="keyword">ADD</span> INDEX idx_score (score); <span class="comment">– indexing named as idx_score; it indexes column score </span></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br/><span class="line"><span class="keyword">ADD</span> INDEX idx_name_score (name, score); <span class="comment">– create a two-column indexing of name and score</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Unique"&gt;<a href="#Unique" class="headerlink" title="Unique"></a>Unique&lt;/h3&gt;&lt;p&gt;Add a <code>UNIQUE</code> constraint to make sure the uniqueness of student’s name (Assume no two students have the same name).&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br/><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (name);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Querying-Table"&gt;<a href="#Querying-Table" class="headerlink" title="Querying Table"></a>Querying Table&lt;/h2&gt;&lt;p&gt;注意字符串用的都是单引号 <code>&#39; &#39;</code>. &lt;/p&gt;&lt;h3 id="Conditionals"&gt;<a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;<code>=</code>: equal&lt;/li&gt;&lt;li&gt;<code>&lt;&gt;</code>: not equal&lt;/li&gt;&lt;li&gt;<code>LIKE</code>: case insensitive exact string comparison;&lt;ul&gt;&lt;li&gt; <code>%</code> is wildcard. <code>&#39;ab%&#39;</code> matches ‘ab’，’abc’，’abcd’ &lt;/li&gt;&lt;li&gt;<code>_</code> is “appeared once”. <code>LIKE &quot;ab_&quot;</code> matches “abc”, but not “ab” or “abcd”&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;<code>BETWEEN … AND …</code>: number is within range of two values (inclusive). e.g. <code>col_name BETWEEN 1.5 AND 10.5</code>&lt;/li&gt;&lt;li&gt;<code>IN (…)</code>: number exists in a list. e.g. <code>col_name IN (2, 4, 6)</code>&lt;/li&gt;&lt;li&gt;<code>NOT …</code>: to negate a predicate&lt;/li&gt;&lt;/ul&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– sometimes we don't need FROM</span></span><br/><span class="line"><span class="comment">– this is usually used to test connection to data base</span></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">200</span></span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (score <span class="operator">&lt;</span> <span class="number">80</span> <span class="keyword">OR</span> score <span class="operator">&gt;</span> <span class="number">90</span>) <span class="keyword">AND</span> gender <span class="operator">=</span> <span class="string">'M'</span>;</span><br/><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (<span class="keyword">NOT</span> class_id <span class="operator">&lt;&gt;</span> <span class="number">2</span>) <span class="keyword">AND</span> score <span class="keyword">LIKE</span> <span class="string">'8%'</span> ;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Projections"&gt;<a href="#Projections" class="headerlink" title="Projections"></a>Projections&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– rename column score as points</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, score points, name <span class="keyword">FROM</span> students;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Orders"&gt;<a href="#Orders" class="headerlink" title="Orders"></a>Orders&lt;/h3&gt;&lt;p&gt;Query results are usually ordered by PK. If we want to change the order, we can &lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– order by score (default in ascending order 正序)</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– order by score and gender (descending score and ascending id)</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, name, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, id;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– together with WHERE</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, name, gender, score</span><br/><span class="line"><span class="keyword">FROM</span> students</span><br/><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span></span><br/><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Partial-Results"&gt;<a href="#Partial-Results" class="headerlink" title="Partial Results"></a>Partial Results&lt;/h3&gt;&lt;p&gt;Query result is sometimes in huge amount. In this case, we only want to show part of the result.&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– show only 3 result</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br/><span class="line">LIMIT <span class="number">3</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– show only 3 result, starting from the 7th.</span></span><br/><span class="line"><span class="keyword">SELECT</span> id, name, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br/><span class="line">LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">6</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Groups"&gt;<a href="#Groups" class="headerlink" title="Groups"></a>Groups&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– return #records in TABLE students, and name it num</span></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– return #records whose gender is 'M', and name the result "boys"</span></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) boys <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">'M'</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;和 <code>COUNT</code> 类似的还有以下函数：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;SUM&lt;/td&gt;&lt;td&gt;计算某一列的合计值，该列必须为数值类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;AVG&lt;/td&gt;&lt;td&gt;计算某一列的平均值，该列必须为数值类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MAX&lt;/td&gt;&lt;td&gt;计算某一列的最大值，如果是字符串类型则返回排序最后的字符&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MIN&lt;/td&gt;&lt;td&gt;计算某一列的最小值，如果是字符串类型则返回排序最前的字符&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;其中，如果 <code>WHERE</code> 条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code>。&lt;/p&gt;&lt;p&gt;分完组后，我们不能再用 <code>WHERE</code> 对组进行筛选，以组为级别进行筛选需要 <code>HAVING</code>. &lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– 按照 class_id 分组(class_id=1, 2, 3, … 各一组)， 分别返回每一组的总记录数</span></span><br/><span class="line"><span class="keyword">SELECT</span> class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– 分完组后，</span></span><br/><span class="line"><span class="keyword">SELECT</span> class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">36</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– 对于像 name 这种在一个组内并不是相同的值，会返回 NULL / 报错</span></span><br/><span class="line"><span class="comment">– 因此对于聚合查询，我们只能放入聚合查询的 col 名或者一些其他的聚合函数</span></span><br/><span class="line"><span class="keyword">SELECT</span> name, class_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) num <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– 查询每个班级男女分别的平均分</span></span><br/><span class="line"><span class="keyword">SELECT</span> class_id, gender, <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> students </span><br/><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> gender, class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> class_id, gender;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Multiple-Tables"&gt;<a href="#Multiple-Tables" class="headerlink" title="Multiple Tables"></a>Multiple Tables&lt;/h3&gt;&lt;p&gt;When you select from more than one table, database will return the Cartesian product of the results. &lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">SELECT</span></span><br/><span class="line"> s.id sid, s.name, s.gender, s.score,</span><br/><span class="line"> c.id cid, c.name cname</span><br/><span class="line"><span class="keyword">FROM</span> students s, classes c</span><br/><span class="line"><span class="keyword">WHERE</span> s.gender <span class="operator">=</span> <span class="string">'M'</span> <span class="keyword">AND</span> c.id <span class="operator">=</span> <span class="number">1</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Join"&gt;<a href="#Join" class="headerlink" title="Join"></a>Join&lt;/h3&gt;&lt;p&gt;与前文的 <em>Multiple Tables</em> 不同的是，<em>Multiple Tables</em> 把所有结果先调出来再根据结果进行筛选，效率很慢；而我们的 <code>JOIN</code> 可以&lt;/p&gt;&lt;ul&gt;&lt;li&gt;<code>INNER JOIN</code>只返回同时存在于两张表的行数据。比如<code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。&lt;/li&gt;&lt;li&gt;<code>RIGHT OUTER JOIN</code>返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段。&lt;/li&gt;&lt;li&gt;<code>LEFT OUTER JOIN</code>则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的<code>class_name</code>是<code>NULL</code>：&lt;/li&gt;&lt;li&gt;<code>FULL OUTER JOIN</code>，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：&lt;/li&gt;&lt;/ul&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– Join 指令模板</span></span><br/><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> tableA ??? <span class="keyword">JOIN</span> tableB <span class="keyword">ON</span> tableA.column1 <span class="operator">=</span> tableB.column2;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– 上文使用的例子对应的指令</span></span><br/><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br/><span class="line"><span class="keyword">FROM</span> students s</span><br/><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br/><span class="line"><span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;p&gt;<img src="https://dataschool.com/assets/images/how-to-teach-people-sql/sqlJoins/sqlJoins_7.png" alt="Join in Graphs"/>&lt;/p&gt;&lt;h3 id="Null"&gt;<a href="#Null" class="headerlink" title="Null"></a>Null&lt;/h3&gt;&lt;p&gt;An alternative to <code>NULL</code> values in your database is to have <em>data-type appropriate default values</em>, like 0 for numerical data, empty strings for text data, etc. But if your database needs to store incomplete data, then <code>NULL</code> values can be appropriate if the default values will skew later analysis (for example, when taking averages of numerical data).&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– select all non-null values</span></span><br/><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … <span class="keyword">FROM</span> mytable</span><br/><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span><span class="operator">/</span><span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Operating-on-Rows"&gt;<a href="#Operating-on-Rows" class="headerlink" title="Operating on Rows"></a>Operating on Rows&lt;/h2&gt;&lt;h3 id="Insert"&gt;<a href="#Insert" class="headerlink" title="Insert"></a>Insert&lt;/h3&gt;&lt;p&gt;When we insert something into the table, we don’t have to specify value of the primary key column. Because the primary key is automatically calculated by the database. &lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (col1, col2, …) </span><br/><span class="line"><span class="keyword">VALUES</span> (v1, v2, …)</span><br/><span class="line"> (v1, v2, …);</span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, name, gender, score) <span class="keyword">VALUES</span></span><br/><span class="line"> (<span class="number">1</span>, <span class="string">'大宝'</span>, <span class="string">'M'</span>, <span class="number">87</span>),</span><br/><span class="line"> (<span class="number">2</span>, <span class="string">'二宝'</span>, <span class="string">'M'</span>, <span class="number">81</span>);</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Update"&gt;<a href="#Update" class="headerlink" title="Update"></a>Update&lt;/h3&gt;&lt;p&gt;We can update a record in the table.&lt;/p&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line">UPDATE table_name <span class="keyword">SET</span> col1<span class="operator">=</span>v1, col2<span class="operator">=</span>v2, … <span class="keyword">WHERE</span> …;</span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line"><span class="comment">– update a single record</span></span><br/><span class="line">UPDATE students <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">'大牛'</span>, score<span class="operator">=</span><span class="number">66</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– update multiple records</span></span><br/><span class="line">UPDATE students <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">'小牛'</span>, score<span class="operator">=</span><span class="number">77</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">AND</span> id<span class="operator">&lt;=</span><span class="number">7</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– add 10 points to all scores below 80</span></span><br/><span class="line">UPDATE students <span class="keyword">SET</span> score<span class="operator">=</span>score<span class="operator">+</span><span class="number">10</span> <span class="keyword">WHERE</span> score<span class="operator">&lt;</span><span class="number">80</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Delete"&gt;<a href="#Delete" class="headerlink" title="Delete"></a>Delete&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> …;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– delete multiple records </span></span><br/><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">AND</span> id<span class="operator">&lt;=</span><span class="number">7</span>;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Operating-on-Table"&gt;<a href="#Operating-on-Table" class="headerlink" title="Operating on Table"></a>Operating on Table&lt;/h2&gt;&lt;h3 id="Create-Table"&gt;<a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_name ( </span><br/><span class="line"> column_name <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>TableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> <span class="operator">*</span>default_value<span class="operator">*</span>, </span><br/><span class="line"> another_column_name <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>TableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> <span class="operator">*</span>default_value<span class="operator">*</span>, </span><br/><span class="line"> … );</span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line">Movies <span class="keyword">table</span> schema</span><br/><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> movies (</span><br/><span class="line"> id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br/><span class="line"> title TEXT,</span><br/><span class="line"> director TEXT,</span><br/><span class="line"> <span class="keyword">year</span> <span class="type">INTEGER</span></span><br/><span class="line">);</span><br/><span class="line"></span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Alter-Table"&gt;<a href="#Alter-Table" class="headerlink" title="Alter Table"></a>Alter Table&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="comment">– add a column to table</span></span><br/><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable </span><br/><span class="line"><span class="keyword">ADD</span> <span class="keyword">column</span> <span class="operator">*</span>DataType<span class="operator">*</span> <span class="operator">*</span>OptionalTableConstraint<span class="operator">*</span> <span class="keyword">DEFAULT</span> default_value;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– remove a column from table</span></span><br/><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br/><span class="line"><span class="keyword">DROP</span> column_to_be_deleted;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">– renaming the table</span></span><br/><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br/><span class="line">RENAME <span class="keyword">TO</span> new_table_name;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="Delete-Table"&gt;<a href="#Delete-Table" class="headerlink" title="Delete Table"></a>Delete Table&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> mytable;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h2 id="Others"&gt;<a href="#Others" class="headerlink" title="Others"></a>Others&lt;/h2&gt;&lt;h3 id="View"&gt;<a href="#View" class="headerlink" title="View"></a>View&lt;/h3&gt;<figure class="highlight sql">&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;<span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;<span class="line"><span class="keyword">create</span> <span class="keyword">view</span> current_demographic_dim</span><br/><span class="line">(current_demographic_key, current_salary_range, current_age_range)</span><br/><span class="line"><span class="keyword">as</span></span><br/><span class="line"><span class="keyword">select</span> demographic_key, salary_range, age_range</span><br/><span class="line"><span class="keyword">from</span> SAMPLES.DEMOGRAPHIC_DIM;</span><br/>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</figure>&lt;h3 id="实用SQL语句"&gt;<a href="#实用SQL语句" class="headerlink" title="实用SQL语句"></a><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1246617682185952">实用SQL语句</a>&lt;/h3&gt;&lt;h2 id="Reference"&gt;<a href="#Reference" class="headerlink" title="Reference"></a>Reference&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;<a href="https://www.liaoxuefeng.com/wiki/1177760294764384">廖雪峰的SQL教程</a>&lt;/li&gt;&lt;li&gt;<a href="https://sqlbolt.com/">SQLBolt</a>&lt;/li&gt;&lt;/ol&gt;</p>]]></content><author><name></name></author><summary type="html"><![CDATA[提交实习申请后发来个小测验，给我做崩溃了，第一个要我做这种级别的SQL，我最多也就会个 select from where，超纲过于严重，只能回头补习]]></summary></entry><entry><title type="html">Java Quick Guide</title><link href="https://yao-lirong.github.io/2021/09/09/java-quick-guide.html" rel="alternate" type="text/html" title="Java Quick Guide"/><published>2021-09-09T16:00:00+00:00</published><updated>2021-09-09T16:00:00+00:00</updated><id>https://yao-lirong.github.io/2021/09/09/java-quick-guide</id><content type="html" xml:base="https://yao-lirong.github.io/2021/09/09/java-quick-guide.html"><![CDATA[<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2> <ul><li><p>Basic File Structure:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> &lt;<span class="title">SameAsFileName</span>&gt; </span>&#123;</span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br /><span class="line">        </span><br /><span class="line">    &#125;</span><br /><span class="line">&#125;</span><br /></pre></td></tr></table></figure></li><li><p>Typecasting: <code>int a = (int) pow(2,5);</code></p></li><li><p>Binary: reference to <a href="https://stackoverflow.com/a/8457832/12006199">formatting</a>, </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0b10101010</span>; <span class="comment">// give binary value</span></span><br /><span class="line">System.out.println(Integer.toBinaryString(x)); <span class="comment">// print binary</span></span><br /><span class="line">Integer.parseUnsignedInt(<span class="string">&quot;10101010&quot;</span>, <span class="number">2</span>); <span class="comment">//input binary</span></span><br /><span class="line"></span><br /><span class="line"><span class="comment">// print with padding</span></span><br /><span class="line">String.format(formatPattern, Integer.toBinaryString(data)).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;0&#x27;</span>); </span><br /><span class="line">String formatPattern = <span class="string">&quot;%&quot;</span> + maximumExpectedSize + <span class="string">&quot;s&quot;</span>;</span><br /></pre></td></tr></table></figure></li><li><p>good </p></li></ul> <h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2> <ul><li><a href="https://stackoverflow.com/a/2807731/12006199">Create a string of all character c</a>: <code>String 10Spaces = new String(new char[10]).replace(&#39;\0&#39;, &#39; &#39;);</code></li></ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Basics Basic File Structure: <figure class="high]]></summary></entry></feed>